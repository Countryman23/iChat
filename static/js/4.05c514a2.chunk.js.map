{"version":3,"sources":["components/Messages/Messages.module.css","components/Messages/MessageName.jsx","components/Messages/MessageItem.jsx","form/messageForm.jsx","components/Messages/Messages.jsx","components/Messages/MessagesContainer.jsx"],"names":["module","exports","MessageName","props","path","id","className","ModCSS","message","to","activeClassName","activeLink","name","MessageItem","item","maxLength100","maxLengthCreator","ReduxMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","requiredField","authAccessHOC","withAuthRedirect","MesDataNameEl","MesDataName","map","MesDataItemEl","MesDataItem","messages","values","addMessageButtonBLL","newTextMessage","MessagesContainer","connect","state","messagesPage","newMessageData","dispatch","addMessageButtonUIAC","Messages"],"mappings":"mFACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,KAAO,uBAAuB,KAAO,uBAAuB,WAAa,+B,6FCWlHC,EAPK,SAACC,GACjB,IAAIC,EAAO,aAAeD,EAAME,GAChC,OAAO,qBAAKC,UAAWC,IAAOC,QAAvB,SACC,cAAC,IAAD,CAASC,GAAIL,EAAMM,gBAAiBH,IAAOI,WAA3C,SAAwDR,EAAMS,UCD3DC,EAJK,SAACV,GACjB,OAAO,8BAAMA,EAAMW,Q,0CCEjBC,EAAeC,YAAiB,KA6BvBC,EAJUC,YAAW,CAChCC,KAAM,WADeD,EApBL,SAACf,GACjB,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOV,KAAK,iBACZW,YAAa,wBAGLC,UAAWC,IACXC,SAAU,CAACC,IAAeZ,OAGlC,8BACI,2DCgFLa,EAFMC,aA9FJ,SAAC1B,GAmBd,IAAI2B,EAAgB3B,EAAM4B,YACzBC,KAAI,SAAApB,GAAI,OAAK,cAAC,EAAD,CAAaA,KAAMA,EAAKA,KACVP,GAAIO,EAAKP,IACJO,EAAKP,OAClC4B,EAAgB9B,EAAM+B,YACzBF,KAAI,SAAAlB,GAAI,OAAK,cAAC,EAAD,CAAaA,KAAMA,EAAKA,KACVT,GAAIS,EAAKT,IACJS,EAAKT,OA4BtC,OACI,sBAAKC,UAAWC,IAAO4B,SAAvB,UACI,qBAAK7B,UAAWC,IAAOK,KAAvB,SAEMkB,IAQN,sBAAKxB,UAAWC,IAAOO,KAAvB,UACMmB,EAkBF,8BACI,cAAC,EAAD,CAAkBb,SApCZ,SAACgB,GACnBjC,EAAMkC,oBAAoBD,EAAOE,8B,QCNnCC,EAAoBC,aAzBF,SAACC,GACrB,MAAO,CACHV,YAAaU,EAAMC,aAAaX,YAChCG,YAAaO,EAAMC,aAAaR,YAChCS,eAAgBF,EAAMC,aAAaC,mBAIhB,SAACC,GACxB,MAAO,CAUHP,oBAAqB,SAACC,GAClBM,EAASC,YAAqBP,QAKhBE,CAA6CM,GAExDP","file":"static/js/4.05c514a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__21bX9\",\"name\":\"Messages_name__17Yqo\",\"item\":\"Messages_item__3_aJg\",\"activeLink\":\"Messages_activeLink__1lkuP\"};","import React from 'react';\r\nimport ModCSS from \"./Messages.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport { NavLink } from \"react-router-dom\"; // импорт с фигурными скобками из-за экспорта не по дефолту\r\n\r\n// Новая компонента с пропсами для пользователей\r\nconst MessageName = (props) => {\r\n    let path = \"/Messages/\" + props.id;\r\n    return <div className={ModCSS.message}>\r\n            <NavLink to={path} activeClassName={ModCSS.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n}\r\n\r\nexport default MessageName;","import React from 'react';\r\n\r\n// Новая компонента с пропсами для сообщений\r\nconst MessageItem = (props) => {\r\n    return <div>{props.item}</div>\r\n}\r\n\r\nexport default MessageItem;\r\n","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport {requiredField, maxLengthCreator} from \"../form/validators\";\r\nimport {Textarea} from \"../form/formsControls\"\r\n\r\n// вынесли в переменную. так как если сразу добавить в validate, то это вызывает зависание\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\n//ниже JSX коде в котором находится HTML разметка\r\n// Field это специальные компоненты для form\r\n// handleSubmit получаем из стандартных свойств формы, из reduxForm. Этим мы говорим, что хотим доверить обработку onSubmit\r\nconst MessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newTextMessage\" \r\n                placeholder={\"add your text message\"} \r\n                // заменили потомучто, когда указываем свои кастомные элементы, пишем без кавычек\r\n                        // component={\"textarea\"}\r\n                        component={Textarea}\r\n                        validate={[requiredField, maxLength100]} />\r\n            </div>\r\n\r\n                <div>\r\n                    <button> Add message </button>\r\n                </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n//HOC\r\nconst ReduxMessageForm = reduxForm ({\r\n    form: \"message\" //уникальное имя для формы\r\n}) (MessageForm)\r\n\r\nexport default ReduxMessageForm;\r\n","import React from 'react';\r\nimport ModCSS from \"./Messages.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport MessageName from \"./MessageName\"\r\nimport MessageItem from \"./MessageItem\"\r\nimport { withAuthRedirect } from \"../../hoc/authRedirect\";\r\nimport ReduxMessageForm from \"../../form/messageForm\"\r\n\r\n\r\nconst Messages = (props) => {\r\n    \r\n    // let MesDataName = [\r\n    //     {id: 1, name: \"name1\"},\r\n    //     {id: 2, name: \"name2\"},\r\n    //     {id: 3, name: \"name3\"},\r\n    //     {id: 4, name: \"name4\"}\r\n    // ];\r\n\r\n    // let MesDataItem = [\r\n    //     {id: 1, item: \"item1\"},\r\n    //     {id: 2, item: \"item2\"},\r\n    //     {id: 3, item: \"item3\"},\r\n    //     {id: 4, item: \"item4\"},\r\n    // ];\r\n    // debugger\r\n    // создали метод для перебора массива.. \r\n    // если функция принимает один параметр, можем писать его без скобок.\r\n    // если return возвращает одну строку, то можно его не прописывать.\r\n    let MesDataNameEl = props.MesDataName\r\n    .map(name => (<MessageName name={name.name} \r\n                                id={name.id}\r\n                                key={name.id} />));\r\n    let MesDataItemEl = props.MesDataItem\r\n    .map(item => (<MessageItem item={item.item} \r\n                                id={item.id}\r\n                                key={item.id} />))\r\n    \r\n    // убрали после того как добавили форму\r\n    // let newTextEl = React.createRef();\r\n    \r\n    //3\r\n    // убрали после того как добавили форму\r\n    // let addTextChange = () => {\r\n    //     let text = newTextEl.current.value;\r\n    //     // props.dispatch(textChangeAC(text))\r\n    //     props.updateTextChange(text);\r\n    // }\r\n\r\n    //4\r\n    // убрали после того как добавили форму\r\n    // let addMessageButtonUI = () => {\r\n    //     // props.dispatch(addMessageButtonUIAC());\r\n    //     props.addMessageButtonBLL();\r\n    // }\r\n\r\n    // убрали после того как добавили форму\r\n    // let newTextDataRemove = props.newMessageData;\r\n    \r\n    //добавили для формы\r\n    const onSubmitHandl = (values) => {// values, значения из формы\r\n        props.addMessageButtonBLL(values.newTextMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={ModCSS.messages}>\r\n            <div className={ModCSS.name}>\r\n                {/* так как это переменная ствим фигурные скобки {} */}\r\n                { MesDataNameEl } \r\n                {/* в этом способе данные берем из массива с объектами */}\r\n                {/* <MessageName name={MesDataName[0].name} id={MesDataName[0].id} />\r\n                <MessageName name={MesDataName[1].name} id={MesDataName[1].id} /> */}\r\n                {/* передаём атрибуты компоненте, через пропсы */}\r\n                {/* <MessageName name=\"name3\" id=\"3\" />\r\n                <MessageName name=\"name4\" id=\"4\" /> */}\r\n            </div>\r\n            <div className={ModCSS.item}>\r\n                { MesDataItemEl }\r\n                {/*  в этом способе данные берем из массива с объектами */}\r\n                {/* <MessageItem item={MesDataItem[0].item} id={MesDataItem[0].id} />\r\n                <MessageItem item={MesDataItem[1].item} id={MesDataItem[1].id} /> */}\r\n                {/* передаём атрибуты компоненте, через пропсы */}\r\n                {/* <MessageItem item=\"item3\" />\r\n               <MessageItem item=\"item4\" /> */}\r\n\r\n               {/* перенесли в MessageForm */}\r\n                {/* <textarea onChange={addTextChange} \r\n                            ref={newTextEl} \r\n                            value={newTextDataRemove} />\r\n                <div>\r\n                    <button onClick={addMessageButtonUI}>\r\n                            Add message</button>\r\n                </div> */}\r\n                \r\n                {/* добавляем форму */}\r\n                <div>\r\n                    <ReduxMessageForm onSubmit={onSubmitHandl} /> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n//доступ только авторизованным\r\nlet authAccessHOC  = withAuthRedirect(Messages);\r\n\r\nexport default authAccessHOC;\r\n","// изменили после того как добавили форму\r\n// import {addMessageButtonUIAC, textChangeAC} from \"../../redux/messages-reducer\";\r\nimport {addMessageButtonUIAC} from \"../../redux/messages-reducer\";\r\nimport Messages from \"./Messages\";\r\nimport { connect } from 'react-redux';\r\n\r\n//1\r\n// const MessagesContainer = (props) => {\r\n//     //идёт в 3\r\n//     let onTextChange = (text) => {\r\n//         props.newState.dispatch(textChangeAC(text))\r\n//     }\r\n//     //идёт в 4\r\n//     let addMessageButtonUI = () => {\r\n//         props.newState.dispatch(addMessageButtonUIAC());\r\n//     }\r\n    \r\n//     let state = props.newState.getState();\r\n//     //2\r\n//     return (\r\n//         <Messages updateTextChange = {onTextChange}\r\n//                 addMessageButtonBLL = {addMessageButtonUI}\r\n//                 MesDataItem = {state.messagesPage.MesDataItem}\r\n//                 newMessageData = {state.messagesPage.newMessageData}\r\n//                 MesDataName = {state.messagesPage.MesDataName} />\r\n//         )\r\n// };\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        MesDataName: state.messagesPage.MesDataName,\r\n        MesDataItem: state.messagesPage.MesDataItem,\r\n        newMessageData: state.messagesPage.newMessageData,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // убрали после того как добавили форму\r\n        // updateTextChange: (text) => {\r\n        //     dispatch(textChangeAC(text));\r\n        // },\r\n\r\n        // заменили после того как добавили форму\r\n        // addMessageButtonBLL: () => {\r\n        //     dispatch(addMessageButtonUIAC());\r\n        // }\r\n        addMessageButtonBLL: (newTextMessage) => {\r\n            dispatch(addMessageButtonUIAC(newTextMessage));\r\n        }\r\n    }\r\n};\r\n\r\nconst MessagesContainer = connect(mapStateToProps, mapDispatchToProps)(Messages);\r\n\r\nexport default MessagesContainer;\r\n"],"sourceRoot":""}