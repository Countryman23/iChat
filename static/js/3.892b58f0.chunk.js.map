{"version":3,"sources":["components/Users/user.module.css","../node_modules/classnames/index.js","components/Users/Pagination.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","components/Users/User.jsx","components/Users/userInfoContainer.jsx","../node_modules/reselect/es/index.js","selectors/profileSelector.js","components/Users/userContainer.jsx"],"names":["module","exports","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","default","Pagination","totalUsersCount","pageSize","currentPage","onUserListChanged","portionSize","pagesCount","Math","ceil","pages","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","ModCSS","paginator","onClick","filter","p","map","cn","obj","selectedPage","value","defineProperty","enumerable","configurable","writable","pageNumber","e","User","user","props","profile","subscribeWrapper","subscribeImg","to","id","src","photos","small","subscribe","followed","disabled","followingInProcess","some","unFollowThunk","followThunk","content","name","status","UserInfoContainer","carrentPage","isLoading","listNamberSelected","users","u","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","getDependencies","funcs","dependencies","every","dep","dependencyTypes","Error","createSelector","memoize","_len","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","undefined","concat","selector","params","resetRecomputations","createSelectorCreator","func","lastArgs","lastResult","getUsersRESelector","state","profilePage","getPageSize","getTotalUsersCount","getCarrentPaget","getIsLoading","getFollowingInProcess","UserContainer","setCarrentPage","getUsersThunkCreator","this","React","Component","compose","withAuthRedirect","connect","toggleFollowingInProcess"],"mappings":"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","file":"static/js/3.892b58f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"user_paginator__kh33y\",\"pageNumber\":\"user_pageNumber__11nOf\",\"selectedPage\":\"user_selectedPage__6YGxR\"};","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React, {useState} from 'react';\r\nimport ModCSS from \"./user.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport cn from \"classnames\";\r\n\r\n// рефакторим\r\n// let Pagination = (props) => {\r\n//     let pagesCount = Math.ceil (props.totalUsersCount / props.pageSize); //3. количество страниц c пользователями\r\n//         let pages = [];\r\n//         //4 заполняем в pages // дописал / 100 что бы уменьшить количество отображаемых страниц\r\n//         for (let i=1; i <= pagesCount; i++) {\r\n//             pages.push(i);\r\n//         }\r\n//     return <div>\r\n//          {pages.map(p => {\r\n//                 return <span className={props.carrentPage === p && ModCSS.Selected}\r\n//                             onClick={(e) => {props.onUserListChanged(p)}}>{p}</span>\r\n//             })}\r\n//     </div>\r\n// }\r\n\r\n// let Pagination = (props, portionSize = 10) // таким способом не работало\r\n\r\n// !!!!не показываеттекущюю страницу!!!\r\nlet Pagination = ({totalUsersCount, pageSize, currentPage, onUserListChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil (totalUsersCount / pageSize); //3. количество страниц c пользователями\r\n    \r\n        let pages = [];\r\n        //4 заполняем в pages\r\n        for (let i=1; i <= pagesCount; i++) {\r\n            pages.push(i);\r\n        }\r\n\r\n        let portionCount = Math.ceil(pagesCount / portionSize);\r\n        let [portionNumber, setPortionNumber] = useState(1);\r\n        let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n        let rightPortionPageNumber = portionNumber * portionSize;\r\n    \r\n    return <div className={ModCSS.paginator}>\r\n    { portionNumber > 1 && <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n            .map((p) => {\r\n            return <span className={ cn({[ModCSS.selectedPage]: currentPage === p }, ModCSS.pageNumber) }\r\n                         key={p}\r\n                         onClick={(e) => {onUserListChanged(p);}}>{p}\r\n                    </span>\r\n        })}\r\n    { portionCount > portionNumber && <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n</div>\r\n}\r\n\r\nexport default Pagination;\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import React from 'react';\r\nimport ModCSS from \"../Profile/Profile.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport { NavLink } from \"react-router-dom\"; // импорт с фигурными скобками из-за экспорта не по дефолту\r\n\r\nlet User = ({ user, ...props }) => {\r\n    return (<div className={ModCSS.profile}>\r\n            <div className={ModCSS.subscribeWrapper}>\r\n                <div className={ModCSS.subscribeImg}>\r\n                    {/* <img src={u.photoUrl} /> // временно скрыли потомучто этих данных нет в api  */}\r\n                    {/* //реализуем переход по юзеру */}\r\n                    <NavLink to={\"/ProfileInfoContainer/\" + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\"} />\r\n                    </NavLink>\r\n                </div>\r\n                <div className={ModCSS.subscribe}>\r\n                    {user.followed\r\n                        //вызываем dispatch и передпм id\r\n                        ? <button disabled={props.followingInProcess.some(id => id === user.id)} onClick={() => { //если в пропсах followingInProcess будет true, то кнопка будет disabled .some(id => id === u.id) этим мы говорим, если хоть одна id равна id пользователя то тогда disabled\r\n                            //перекинули логику в санки\r\n                            // props.toggleFollowingInProcess(true, u.id);//мы фоловим true\r\n                            //добавляем запрос отписки\r\n                            //перекинули запрос в api.js apiUnfollowUser\r\n                            // axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, \r\n                            // { withCredentials: true,\r\n                            //     headers: {\r\n                            //         \"API-KEY\": \"b945a48b-e23b-46ca-a66f-5493b89d60ce\"\r\n                            //     }\r\n                            // } ) //headers стандартный запрос к API. Тут говорится, буду обращаться к заголовкам. Цепляем ключ к headers\r\n                            // // withCredentials передаётся в delete вторым параметром\r\n                            // .then(response => {\r\n                            //перекинули логику в санки\r\n                            // apiUnfollowUser(u.id).then(data => {\r\n                            //     // debugger\r\n                            //         if (data.resultCode == 0) {\r\n                            //             props.unFollow(u.id);\r\n                            //         }\r\n                            //         props.toggleFollowingInProcess(false, u.id);//когда мы закончим then\r\n\r\n                            //     });\r\n                            //когда компонента классовая мы пропсы запрашиваем через this.props.\r\n                            //когда компонента функциональная мы пропсы запрашиваем напрямую через props.\r\n                            props.unFollowThunk(user.id)\r\n                        }} >Unfollow</button>\r\n                        : <button disabled={props.followingInProcess.some(id => id === user.id)} onClick={() => { //если в пропсах followingInProcess будет false, то кнопка НЕ будет disabled. .some(id => id === u.id) этим мы говорим, если хоть одна id равна id пользователя то тогда disabled\r\n                            //перекинули логику в санки\r\n                            // props.toggleFollowingInProcess(true, u.id);//мы фоловим true\r\n                            //добавляем запрос подписки\r\n                            //перекинули запрос в api.js apiFollowUser\r\n                            //     axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {}, \r\n                            //    { withCredentials: true,\r\n                            //     headers: {\r\n                            //         \"API-KEY\": \"b945a48b-e23b-46ca-a66f-5493b89d60ce\"\r\n                            //     }\r\n                            // } ) //подтвеождение авторизации по технологии CORS. withCredentials передаётся в get вторым параметром, а в post третьим\r\n                            // .then(response => {\r\n                            //перекинули логику в санки\r\n                            // apiFollowUser(u.id).then(data => {\r\n                            //     // debugger\r\n                            //             if (data.resultCode == 0) {\r\n                            //                 props.follow(u.id);\r\n                            //             }\r\n                            //             props.toggleFollowingInProcess(false, u.id);//когда мы закончим then\r\n                            //         });\r\n                            props.followThunk(user.id)\r\n                        }} >Follow</button>}\r\n                </div>\r\n            </div>\r\n            <div className={ModCSS.content}>\r\n                {/* <div>{u.fullName}</div> // временно скрыли потомучто этих данных нет в api */}\r\n                <div>{user.name}</div>\r\n                <div>{user.status}</div>\r\n                {/* <div>{u.location.country}</div>// временно скрыли потомучто этих данных нет в api*/}\r\n                {/* <div>{u.location.city}</div>// временно скрыли потомучто этих данных нет в api */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport ModCSS from \"../Profile/Profile.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport Loading from \"../../loading\";\r\nimport Pagination from \"../Users/Pagination\"\r\nimport User from \"./User\"\r\n\r\nlet UserInfoContainer = ({carrentPage, onUserListChanged, totalUsersCount, pageSize, ...props}) => {\r\n    return <div>\r\n            \r\n            {props.isLoading ? <Loading /> : null }\r\n\r\n            {/* Убираем кнопку */}\r\n            {/* <button onClick={this.getUsers}>Get users</button> */}\r\n            {/*  {props.users.map(u => берём users полученныйе из props.setUsers, которые пришли туда из ответа сервера*/}\r\n            {/* временная запись для проверки, далее выводим количество страниц из результатов сервера */}\r\n            {/* <div className={ModCSS.listNamberSelectedWrapper} >\r\n                <span className={ModCSS.listNamberSelected}>1</span>\r\n                <span>2</span>\r\n                <span>3</span>\r\n\r\n            {/* //9 создаём массив*/}\r\n            {/* //10. деллаем логику onClick */}\r\n\r\n            <div className={ModCSS.listNamberSelected}>\r\n                <Pagination carrentPage={carrentPage}\r\n                            onUserListChanged={onUserListChanged}\r\n                            totalUsersCount={totalUsersCount}\r\n                            pageSize={pageSize} />\r\n            </div>\r\n            <div >\r\n                {props.users.map(u => <User key={u.id}\r\n                                            user={u}\r\n                                            followingInProcess={props.followingInProcess}\r\n                                            followThunk={props.followThunk}\r\n                                            unFollowThunk={props.unFollowThunk} />  )}\r\n            </div>\r\n    </div>\r\n}\r\n\r\nexport default UserInfoContainer;\r\n","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import { createSelector } from \"reselect\";\r\n\r\nexport const getUsers = (state) => {\r\n    return state.profilePage.users;\r\n}\r\n\r\n// Реселектор. Необходим для сравнения старых данных с новыми.\r\n// При наличии изменени отрисовка\r\n// нет изменений ничего не перерисовываем\r\nexport const getUsersRESelector = createSelector(getUsers, (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.profilePage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.profilePage.totalUsersCount;\r\n\r\n}\r\nexport const getCarrentPaget = (state) => {\r\n    return state.profilePage.carrentPage;\r\n\r\n}\r\nexport const getIsLoading = (state) => {\r\n    return state.profilePage.isLoading;\r\n\r\n}\r\nexport const getFollowingInProcess = (state) => {\r\n    return state.profilePage.followingInProcess;\r\n}","import React from 'react';\r\n// import {toggleIsLoadingAC, followAC, unFollowAC, setUsersAC, setCarrentPageAC, setTotalUsersCountAC} from '../../redux/profile-reducer';\r\n//Убираем окончание АС чтобы исправить под новый синтаксис\r\nimport {getUsersThunkCreator, toggleFollowingInProcess, setCarrentPage, } from '../../redux/profile-reducer';\r\n//изменили после использования санок\r\nimport { followThunk, unFollowThunk } from '../../redux/profile-reducer';\r\nimport { connect } from 'react-redux';\r\nimport UserInfoContainer from './userInfoContainer';\r\nimport { withAuthRedirect } from \"../../hoc/authRedirect\";\r\nimport { compose } from 'redux';\r\nimport { getUsersRESelector, getPageSize, getTotalUsersCount, getCarrentPaget, getIsLoading, getFollowingInProcess} from \"../../selectors/profileSelector\"\r\n\r\nclass UserContainer extends React.Component {\r\n\r\n    //если конструктор работает только с супер, то его можно не записывать, это происходит по умолчанию\r\n    // constructor(props) {\r\n    //     super(props);\r\n\r\n    //     // перенесли в componentDidMount\r\n    //     // axios.get(\"https://social-network.samuraijs.com/api/1.0/users\")\r\n    //     // .then(response => {\r\n    //     //     // debugger;\r\n    //     //     this.props.setUsers(response.data.items);\r\n    //     // });\r\n    // }\r\n\r\n    //убираем let, так как внутри класса мы можем одъявлять только методы\r\n    // getUsers = () => {\r\n    //     if (this.props.users.length === 0) {\r\n\r\n    //         axios.get(\"https://social-network.samuraijs.com/api/1.0/users\")\r\n    //             .then(response => {\r\n    //                 // debugger;\r\n    //                 this.props.setUsers(response.data.items);\r\n    //             });\r\n    //     }\r\n    // } // Убираем логику нажатия кнопки\r\n\r\n    //создаём объект componentDidMount для отрисовки jsx полученного из render()\r\n    componentDidMount() {\r\n        // перенесли в санку\r\n        // this.props.toggleIsLoading(true);\r\n        //перекинули запрос в api.js apiGetUsers\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.carrentPage}&count=${this.props.pageSize}`,\r\n        // {withCredentials: true}\r\n        // ) //6. добавили props чтобы данные для (page и count) подтягивались с сервера \r\n        //apiGetUsers(this.props.carrentPage, this.props.pageSize).then(response => {\r\n            // перенесли в санку\r\n        // apiGetUsers(this.props.carrentPage, this.props.pageSize).then(data => {\r\n        //         this.props.toggleIsLoading(false)\r\n        //         /// this.props.setUsers(response.data.items); //этим мы говорим, добавь в наш store юзеров из items\r\n        //         /// this.props.setTotalUsersCount(response.data.totalCount); //19.\r\n        //         this.props.setUsers(data.items); //этим мы говорим, добавь в наш store юзеров из items\r\n        //         this.props.setTotalUsersCount(data.totalCount); //19.\r\n        //     });\r\n        // this.props.getUsersThunkCreator(this.props.carrentPage, this.props.pageSize);\r\n        // рефакторинг\r\n        const {carrentPage, pageSize} = this.props;\r\n        this.props.getUsersThunkCreator(carrentPage, pageSize);\r\n    }\r\n    \r\n    //13. делаем метод для onClick (pageNumber это просто логическое название)\r\n    onUserListChanged = (pageNumber) => {\r\n        //заменили на санки\r\n        // this.props.toggleIsLoading(true)\r\n        // this.props.setCarrentPage(pageNumber);\r\n        \r\n        // рефакторинг\r\n        const {pageSize} = this.props;\r\n        this.props.setCarrentPage(pageNumber, pageSize);\r\n        //перекинули запрос в api.js apiGetUsers\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`,\r\n        // {withCredentials: true}\r\n        // ) //14. меняем page=$ \r\n        // apiGetUsers(pageNumber, this.props.pageSize).then(response => {\r\n        //заменили на санки\r\n        // apiGetUsers(pageNumber, this.props.pageSize).then(data => {\r\n        //         this.props.toggleIsLoading(false)\r\n                // this.props.setUsers(response.data.items); //этим мы говорим, добавь в наш store юзеров из items\r\n                // this.props.setUsers(data.items); //этим мы говорим, добавь в наш store юзеров из items\r\n            // });\r\n            //когда компонента функциональная мы пропсы запрашиваем напрямую через props.\r\n            //когда компонента классовая мы пропсы запрашиваем через this.props.\r\n        this.props.getUsersThunkCreator(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    // render получает и отрисовывает данные, затем передаёт их для отрисовки в componentDidMount. и если они изменились они перерисовываются в componentDidUpdate\r\n    render() {\r\n        \r\n        return <UserInfoContainer totalUsersCount={this.props.totalUsersCount}\r\n                        pageSize={this.props.pageSize} \r\n                        carrentPage={this.props.carrentPage}\r\n                        //onUserListChanged компонента этого уровня, поэтому её пишем без props\r\n                        onUserListChanged={this.onUserListChanged}\r\n                        users={this.props.users}\r\n                        // follow={this.props.follow} //убрали после использования санок\r\n                        // unFollow={this.props.unFollow} //убрали после использования санок\r\n                        followThunk={this.props.followThunk}\r\n                        unFollowThunk={this.props.unFollowThunk}\r\n                        isLoading={this.props.isLoading}\r\n                        // toggleFollowingInProcess={this.props.toggleFollowingInProcess} //убрали после использования санок\r\n                        followingInProcess={this.props.followingInProcess} />\r\n    }\r\n}\r\n\r\n//ниже переписали через селекторы\r\n// const mapStateToProps = (state) => {\r\n//     return {\r\n//         users: state.profilePage.users, //это прийдёт в пропс\r\n//         pageSize: state.profilePage.pageSize, //2\r\n//         totalUsersCount: state.profilePage.totalUsersCount,\r\n//         carrentPage: state.profilePage.carrentPage,//5\r\n//         isLoading: state.profilePage.isLoading,\r\n//         followingInProcess: state.profilePage.followingInProcess,\r\n//     }\r\n// };\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsersRESelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        carrentPage: getCarrentPaget(state),\r\n        isLoading: getIsLoading(state),\r\n        followingInProcess: getFollowingInProcess(state),\r\n    }\r\n};\r\n\r\n//перенеслив в connect\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         follow: (userId) => {\r\n//             dispatch(followAC (userId));  \r\n//         },\r\n//         unFollow: (userId) => {\r\n//             dispatch(unFollowAC (userId)); \r\n//         },\r\n//         setUsers: (users) => {\r\n//             dispatch(setUsersAC (users)); // для отображения пользователей\r\n//         },\r\n//         setCarrentPage: (pageNumber) => {\r\n//             dispatch(setCarrentPageAC (pageNumber)); //12. реакция на onClick, и диспатчим то что нам возвращает вызов AC. (pageNumber это просто логическое название)\r\n//         },\r\n//         setTotalUsersCount: (totalCount) => {\r\n//             dispatch(setTotalUsersCountAC (totalCount)); //18\r\n//         },\r\n//         toggleIsLoading: (isLoading) => {\r\n//             dispatch(toggleIsLoadingAC (isLoading));\r\n//         },\r\n//     }\r\n// };\r\n\r\n//рефакторинг\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ProfileAPIComponent);\r\n\r\n// //делаем сокращение. так как mapDispatchToProps берёт всего лишь ссылки на AC\r\n// export default connect(mapStateToProps, \r\n//                         {follow: followAC,  \r\n//                         unFollow: unFollowAC,\r\n//                         setUsers: setUsersAC,\r\n//                         setCarrentPage: setCarrentPageAC,\r\n//                         setTotalUsersCount: setTotalUsersCountAC,\r\n//                         toggleIsLoading: toggleIsLoadingAC})\r\n//                         (ProfileAPIComponent);\r\n\r\n//доступ только авторизованным\r\n//переделали логику через compose\r\n// let authAccessHOC = withAuthRedirect(ProfileComponent);\r\n\r\n//снова редактируем так как современный ситаксис нам это позволяет. Убираем окончание АС, и когда {ключ: значениe} равны их можно записать одним словом\r\n//follow.....getUsersThunkCreator теперь они попадают в пропсы в компоненте ProfileComponent\r\n\r\n// далее применяем compose\r\n// export default connect(mapStateToProps, {\r\n//                             // follow,  //изменили после использования санок\r\n//                             // unFollow, //изменили после использования санок\r\n//                             followThunk,  \r\n//                             unFollowThunk,\r\n//                             // setUsers, // убрали так как используем напрямую через санки в reducere\r\n//                             setCarrentPage,\r\n//                             // setTotalUsersCount, // убрали так как используем напрямую через санки в reducere\r\n//                             // toggleIsLoading, // убрали так как используем напрямую через санки в reducere\r\n//                             toggleFollowingInProcess,\r\n//                             getUsersThunkCreator})\r\n//                             (authAccessHOC); // подменили ProfileComponent ввили НОС\r\n\r\n//ниже собран готовый compose\r\n// compose (connect(mapStateToProps, {\r\n//                                 followThunk,  \r\n//                                 unFollowThunk,\r\n//                                 setCarrentPage,\r\n//                                 toggleFollowingInProcess,\r\n//                                 getUsersThunkCreator}),\r\n//                                 authAccessHOC)\r\n//                                 (ProfileComponent);\r\n// const profileContainerConnect = connect(mapStateToProps, {\r\n//                                 followThunk,  \r\n//                                 unFollowThunk,\r\n//                                 setCarrentPage,\r\n//                                 toggleFollowingInProcess,\r\n//                                 getUsersThunkCreator})\r\n//                                 (authAccessHOC); \r\n// export default profileContainerConnect;\r\n\r\nexport default compose (\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {followThunk, unFollowThunk, setCarrentPage,\r\n    toggleFollowingInProcess, getUsersThunkCreator})\r\n    )(UserContainer)\r\n"],"sourceRoot":""}