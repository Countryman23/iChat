{"version":3,"sources":["redux/messages-reducer.js","api/api.js","components/Navigation/Navigation.module.css","logo.png","components/Navigation/Navigation.jsx","redux/auth-reducer.js","form/loginForm.jsx","components/Authorization/login.jsx","components/Authorization/auth.jsx","components/Authorization/authContainer.jsx","redux/myPost-reducer.js","components/MyPosts/Post/Post.jsx","form/postForm.jsx","components/MyPosts/MyPosts.jsx","components/MyPosts/MyPostsContainer.jsx","components/Profile/statusWithHook.jsx","userPhoto.png","components/Profile/descriptionForm.jsx","components/Profile/profileInfo.jsx","components/Profile/profileInfoContainer.jsx","components/Settings/Settings.jsx","redux/app-reducer.js","hoc/withSuspense.js","App.js","reportWebVitals.js","redux/redux-store.js","index.js","redux/profile-reducer.js","form/validators.js","form/formsControls.js","form/formStyle.module.css","components/MyPosts/MyPosts.module.css","hoc/authRedirect.js","components/Profile/Profile.module.css","isLoading.gif","loading.jsx","App.module.css","components/Authorization/Authorization.module.css"],"names":["ADD_MESSAGE_BUTTON_BLL","initialState","MesDataName","id","name","MesDataItem","item","addMessageButtonUIAC","newTextMessage","type","messagesReducer","state","action","newMessage","instance","axios","withCredentials","baseURL","headers","apiGetUsers","carrentPage","pageSize","get","then","response","data","apiUsersRouter","userId","apiAuthProfile","apiFollowUser","post","apiUnfollowUser","delete","apiStatusInfo","apiUpdateStatusInfo","status","put","apiLogin","email","password","rememberMe","apiLogout","apiSavePhoto","photoFile","formData","FormData","append","module","exports","Navigation","className","ModCSS","main","logo","src","Logo","alt","to","activeClassName","activeLink","SET_AUTH_USER_DATA","login","isAuth","setAuthUserData","authProfileThunk","dispatch","a","resultCode","authReducer","maxLength20","maxLengthCreator","ReduxLoginForm","reduxForm","form","handleSubmit","error","onSubmit","Field","placeholder","component","Input","validate","requiredField","loginFormError","connect","auth","LoginThunkCreator","errorMessage","messages","length","stopSubmit","_error","props","Auth","onClick","LogoutThunkCreator","AuthContainer","active","this","React","Component","ADD_POST_BLL","postData","text","like","myPostReducer","newPost","newTextPost","Post","maxLength10","ReduxPostForm","Textarea","authAccessHOC","withAuthRedirect","postDataEl","map","header","values","addPostBLL","MyPostsContainer","myPostsPage","newPostData","addPostUIActionCreator","MyPosts","StatusWithHook","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","getUpdateStatusInfoThunk","onChange","e","currentTarget","value","createField","validators","Checkbox","TextareaForm","DescriptionFormReduxForm","Description","isOwner","profileInfo","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","key","contactTitle","contactValue","Contact","userPhoto","photos","large","target","files","savePhoto","console","log","ProfileInfoContainer","match","params","getProfileInfoThunk","getStatusInfoThunk","reloadProfile","prevProps","prevState","snapshot","WithUrlDataContainerComponent","withRouter","profilePage","authorizeUserId","Settings","SET_INITIALIZED","initialized","appReducer","withSuspense","Suspense","fallback","MessagesContainer","lazy","UserContainer","App","initializApp","appWrapper","nav","content","path","render","newState","store","app","promise","Promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","messagesPage","profileReducer","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","StrictMode","document","getElementById","FOLLOW","UNFOLLOW","SET_USERS","SET_CARRENT_PAGE","SET_USER_COUNT","TOGGLE_IS_LOADING","SET_PROFILE_INFO","TOGGLE_IS_FOLLOWING","SET_STATUS","SAVE_PHOTO","users","totalUsersCount","isLoading","followingInProcess","updatefollowUnfollow","items","itemId","propName","newProps","u","followSaccess","unFollowSaccess","setCarrentPage","toggleIsLoading","toggleFollowingInProcess","getUsersThunkCreator","totalCount","count","followUnfollow","apiMethod","actionCreator","followThunk","bind","unFollowThunk","file","followed","filter","profile","maxLength","FormControl","input","meta","child","showError","touched","children","restProps","mapStateToPropsForRedirect","RedirectComponent","Loading","loading"],"mappings":"qJACMA,EAAyB,8BAI3BC,EAAe,CACfC,YAAa,CACT,CAACC,GAAI,EAAGC,KAAM,SACd,CAACD,GAAI,EAAGC,KAAM,SACd,CAACD,GAAI,EAAGC,KAAM,SACd,CAACD,GAAI,EAAGC,KAAM,UAElBC,YAAa,CACT,CAACF,GAAI,EAAGG,KAAM,SACd,CAACH,GAAI,EAAGG,KAAM,SACd,CAACH,GAAI,EAAGG,KAAM,SACd,CAACH,GAAI,EAAGG,KAAM,WA8ETC,EAAuB,SAACC,GAAD,MAAqB,CAACC,KAAMT,EAAwBQ,mBAIzEE,IA5EgB,WAAmC,IAAlCC,EAAiC,uDAAzBV,EAAcW,EAAW,uCA+C7D,OAAQA,EAAOH,MAOX,KAAKT,EAGD,IAAIa,EAAaD,EAAOJ,eACxB,OAAO,2BACAG,GADP,IAIIN,YAAY,GAAD,mBAAMM,EAAMN,aAAZ,CAAyB,CAACF,GAAI,EAAGG,KAAMO,OAG1D,QACI,OAAOF,K,gCCxFnB,iWAEMG,EAAWC,SAAa,CAC1BC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,0CAINC,EAAc,SAACC,EAAaC,GAErC,OAAOP,EAASQ,IAAT,qBAA2BF,EAA3B,kBAAgDC,IAClDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAStBC,EAAiB,SAACC,GAE3B,OAAOb,EAASQ,IAAI,WAAaK,GAChCJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGlBG,EAAiB,WAE1B,OAAOd,EAASQ,IAAT,WACNC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGlBI,EAAgB,SAACF,GAC1B,OAAOb,EAASgB,KAAT,iBAAwBH,GAAU,IACxCJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGlBM,EAAkB,SAACJ,GAC5B,OAAOb,EAASkB,OAAT,iBAA0BL,IAChCJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGlBQ,EAAgB,SAACN,GAC1B,OAAOb,EAASQ,IAAI,kBAAoBK,GACvCJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGlBS,EAAsB,SAACC,GAChC,OAAOrB,EAASsB,IAAT,kBAAgC,CAACD,OAAQA,IAC/CZ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGlBY,EAAW,SAACC,EAAOC,GAAmC,IAAzBC,EAAwB,wDAC9D,OAAO1B,EAASgB,KAAT,cAA6B,CAACQ,QAAOC,WAAUC,eACrDjB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGlBgB,EAAY,WACrB,OAAO3B,EAASkB,OAAT,eACNT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGlBiB,EAAe,SAACC,GACzB,IAAMC,EAAW,IAAIC,SAGrB,OAFAD,EAASE,OAAO,QAASH,GAElB7B,EAASsB,IAAT,gBAA8BQ,EAAU,CAC3C1B,QAAS,CACL,eAAgB,yBAGvBK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,yCCxE/BsB,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,yBAAyB,WAAa,iC,uICDhF,MAA0B,iC,eCqC1BC,EAhCI,WACf,OACI,sBAAKC,UAAWC,IAAOC,KAAvB,UACI,sBAAKF,UAAWC,IAAOE,KAAvB,UACI,qBAAKC,IAAKC,EAAMC,IAAI,SACpB,gKAEJ,gCAEI,qBAAKN,UAAWC,IAAO7C,KAAvB,SAGI,cAAC,IAAD,CAASmD,GAAG,iBAAiBC,gBAAiBP,IAAOQ,WAArD,6BAEJ,qBAAKT,UAAWC,IAAO7C,KAAvB,SACI,cAAC,IAAD,CAASmD,GAAG,wBAAwBC,gBAAiBP,IAAOQ,WAA5D,uBAEJ,qBAAKT,UAAWC,IAAO7C,KAAvB,SACI,cAAC,IAAD,CAASmD,GAAG,SAASC,gBAAiBP,IAAOQ,WAA7C,qBAEJ,qBAAKT,UAAWC,IAAO7C,KAAvB,SACI,cAAC,IAAD,CAASmD,GAAG,YAAYC,gBAAiBP,IAAOQ,WAAhD,wBAGJ,qBAAKT,UAAWC,IAAO7C,KAAvB,SACI,cAAC,IAAD,CAASmD,GAAG,YAAYC,gBAAiBP,IAAOQ,WAAhD,+B,yEC3BdC,EAAqB,0BAEvB3D,EAAe,CACf0B,OAAQ,KACRkC,MAAO,KACPvB,MAAO,KACPwB,QAAQ,GAKCC,EAAkB,SAACpC,EAAQkC,EAAOvB,EAAOwB,GAAvB,MAAmC,CAAErD,KAAMmD,EAAoBnC,KAAM,CAAEE,SAAQkC,QAAOvB,QAAOwB,YAmB/GE,EAAmB,yDAAM,WAAOC,GAAP,uBAAAC,EAAA,sEAEjBtC,cAFiB,OAIV,KAFpBH,EAF8B,QAIzB0C,aAAmB,EACG1C,EAAKA,KAA1BtB,EADiB,EACjBA,GAAI0D,EADa,EACbA,MAAOvB,EADM,EACNA,MACjB2B,EAASF,EAAgB5D,EAAI0D,EAAOvB,GAAO,KANb,2CAAN,uDAgDjB8B,EAtCY,WAAmC,IAAlCzD,EAAiC,uDAAzBV,EAAcW,EAAW,uCACzD,OAAQA,EAAOH,MACX,KAAKmD,EAED,OAAO,2BACAjD,GACAC,EAAOa,MAIlB,QACI,OAAOd,I,mDC/Cb0D,EAAcC,YAAiB,IA0CtBC,EAJQC,YAAW,CAC9BC,KAAM,SADaD,EAjCL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAC9B,OACI,uBAAMC,SAAUF,EAAhB,UACI,8BACI,cAACG,EAAA,EAAD,CAAOzE,KAAK,QACR0E,YAAa,QACbC,UAAWC,IACXC,SAAU,CAACC,IAAeb,OAElC,8BACI,cAACQ,EAAA,EAAD,CAAOzE,KAAK,WACR0E,YAAa,WACbC,UAAWC,IACXC,SAAU,CAACC,IAAeb,OAElC,gCACI,cAACQ,EAAA,EAAD,CAAOzE,KAAK,aACRK,KAAM,WACNsE,UAAW,UAHnB,eAMKJ,GAAS,qBAAKzB,UAAWC,IAAOgC,eAAvB,SACLR,IAGT,8BACI,kD,OCADS,eARS,SAACzE,GACrB,MAAO,CACHmD,OAAQnD,EAAM0E,KAAKvB,UAMc,CAACwB,kBFqBT,SAAChD,EAAOC,EAAUC,GAAlB,8CAAiC,WAAOyB,GAAP,iBAAAC,EAAA,sEAC7C7B,YAASC,EAAOC,EAAUC,GADmB,OAGtC,KAFpBf,EAD0D,QAGrD0C,WACGF,EAASD,MAKLuB,EAAe9D,EAAK+D,SAASC,OAAS,EAAIhE,EAAK+D,SAAS,GAAK,aACjEvB,EAASyB,YAAY,QAAS,CAACC,OAAQJ,MAVW,2CAAjC,wDErBlBH,EA9BD,SAACQ,GASX,OAAIA,EAAM9B,OACC,cAAC,IAAD,CAAUL,GAAK,0BAKtB,gCACA,uCACI,cAAC,EAAD,CAAgBmB,SAfF,SAAChC,GAGnBgD,EAAMN,kBAAkB1C,EAASN,MAAOM,EAASL,SAAUK,EAASJ,qBCW7DqD,EAlBF,SAACD,GACV,OACI,8BAOKA,EAAM9B,OACD,gCAAM8B,EAAM/B,MAAZ,IAAmB,wBAAQiC,QAASF,EAAMG,mBAAvB,qBAAnB,OAEA,eAAC,IAAD,CAAStC,GAAI,SAAb,cAAwB,cAAC,EAAD,IAAxB,UCKZuC,E,uKAEF,c,oBAqBA,WACI,OACI,qBAAK9C,UAAS,UAAKC,IAAO7C,KAAZ,YAAoB6C,IAAO8C,QAAzC,SACG,cAAC,EAAD,eAAUC,KAAKN,c,GA1BFO,IAAMC,WAwCnBhB,eARS,SAACzE,GAAD,MAAY,CAChCmD,OAAQnD,EAAM0E,KAAKvB,OACnBD,MAAOlD,EAAM0E,KAAKxB,SAMmB,CAACkC,mBJUR,yDAAM,WAAO9B,GAAP,SAAAC,EAAA,sEACnBzB,cADmB,OAGZ,IAHY,OAG3B0B,YACGF,EAASF,EAAgB,KAAM,KAAM,MAAM,IAJnB,2CAAN,wDIVnBqB,CAAiDY,G,QC9D1DK,EAAe,oBAMjBpG,EAAe,CACfqG,SAAU,CACN,CAAEnG,GAAI,EAAGoG,KAAM,QAASC,KAAM,IAC9B,CAAErG,GAAI,EAAGoG,KAAM,QAASC,KAAM,IAC9B,CAAErG,GAAI,EAAGoG,KAAM,KAAMC,KAAM,IAC3B,CAAErG,GAAI,EAAGoG,KAAM,KAAMC,KAAM,MAwHpBC,EAlHO,WAAmC,IAAlC9F,EAAiC,uDAAzBV,EAAcW,EAAW,uCA+EpD,OAAQA,EAAOH,MAOX,KAAK4F,EACD,IAAIK,EAAU,CACVvG,GAAI,EAGJoG,KAAM3F,EAAO+F,YACbH,KAAM,IAGV,OAAO,2BACA7F,GADP,IAII2F,SAAS,GAAD,mBAAM3F,EAAM2F,UAAZ,CAAsBI,MAItC,QACI,OAAO/F,I,iBCvGJiG,EAhBF,SAAChB,GACV,OACI,8BACI,sBAAK1C,UAAWC,IAAO7C,KAAvB,UACI,qBAAKgD,IAAI,wGADb,UAGQsC,EAAMW,KAHd,YAGsBX,EAAMY,MACxB,8BACI,kD,QCLdK,EAAcvC,YAAiB,IA4BtBwC,EAJOtC,YAAW,CAC7BC,KAAM,QADYD,EAnBL,SAACoB,GACd,OACI,uBAAMhB,SAAUgB,EAAMlB,aAAtB,UACI,8BACI,cAACG,EAAA,EAAD,CAAOzE,KAAK,cACJ0E,YAAa,qBAGbC,UAAWgC,IACX9B,SAAU,CAACC,IAAe2B,OAElC,8BACI,wDCyFLG,GAFMC,aAtGL,SAACrB,GAmBb,IAAIsB,EAAatB,EAAMU,SACtBa,KAAI,SAAArF,GAAI,OAAK,cAAC,EAAD,CAAMyE,KAAMzE,EAAKyE,KACXC,KAAM1E,EAAK0E,MACN1E,EAAK3B,OA2C9B,OACI,gCAUI,sBAAK+C,UAAWC,IAAO7C,KAAvB,UACI,qBAAK4C,UAAWC,IAAOiE,OAAvB,SAA+B,4CAe/B,8BACI,cAAC,EAAD,CAAexC,SAhCT,SAACyC,GACnBzB,EAAM0B,WAAWD,EAAOV,qBAkClBO,QCvCCK,GAFUnC,aAzBD,SAACzE,GACrB,MAAO,CACH2F,SAAU3F,EAAM6G,YAAYlB,SAC5BmB,YAAa9G,EAAM6G,YAAYC,gBAIZ,SAACxD,GACxB,MAAO,CAUHqD,WAAY,SAACX,GACT1C,EJuE0B,SAAC0C,GAAD,MAAkB,CAAClG,KAAM4F,EAAcM,eIvExDe,CAAuBf,QAMnBvB,CAA6CuC,I,6BCPvDC,GArDQ,SAAChC,GASpB,MAA8BiC,oBAAS,GAAvC,oBAAKC,EAAL,KAAeC,EAAf,KACA,EAA0BF,mBAASjC,EAAMzD,QAAzC,oBAAKA,EAAL,KAAa6F,EAAb,KAIAC,qBAAW,WACPD,EAAUpC,EAAMzD,UACjB,CAACyD,EAAMzD,SAgBV,OACI,iCACM2F,GACE,gCACI,uCADJ,KACmB,uBAAMI,cAlBX,WACtBH,GAAY,IAiBe,UACVnC,EAAMzD,QAAU,MADN,UAKtB2F,GACG,8BACI,uBAAOK,WAAW,EACVC,OAtBI,WACxBL,GAAY,GACZnC,EAAMyC,yBAAyBlG,IAqBXmG,SAlBD,SAACC,GACpBP,EAAUO,EAAEC,cAAcC,QAkBNA,MAAOtG,UCjDpB,OAA0B,sCCuBnCuG,GAAc,SAAC5D,EAAa1E,EAAMuI,EAAY5D,GAAhC,OAChB,8BACI,cAACF,EAAA,EAAD,CAAOC,YAAaA,EACZ1E,KAAMA,EACNuI,WAAYA,EACZ5D,UAAWA,OAIrBC,GAAQ,WACV,OAAO,8BACH,6BAIF4D,GAAW,WACb,OAAO,8BACH,uBAAOnI,KAAK,gBAIdoI,GAAe,WACjB,OAAO,8BACH,gCAMOC,GAFkBtE,YAAU,CAACC,KAAM,aAAjBD,EA/CT,SAACoB,GACrB,OAAO,uBAAMhB,SAAUgB,EAAMlB,aAAtB,UACH,8BACI,8CAEJ,gCACI,0CADJ,KACuBgE,GAAY,YAAa,WAAY,GAAI1D,OAEhE,gCACI,kDADJ,KAC+B0D,GAAY,GAAI,iBAAkB,GAAIE,OAErE,gCACI,0CADJ,KACuBF,GAAY,YAAa,WAAY,GAAIG,OAEhE,gCACI,yCADJ,KACsBH,GAAY,WAAY,UAAW,GAAIG,aC2C/DE,GAAc,SAACnD,GACjB,OAAO,gCACFA,EAAMoD,SAAW,oCAAM,wBAAQlD,QAASF,EAAMkC,SAAvB,kBAAN,OAClB,gCACI,0CADJ,KACuBlC,EAAMqD,YAAYC,YAEzC,gCACI,kDADJ,KAC+BtD,EAAMqD,YAAYE,eAAiB,MAAQ,QAEzEvD,EAAMqD,YAAYE,gBACf,gCACI,0CADJ,KACuBvD,EAAMqD,YAAYG,6BAE7C,gCACI,yCADJ,KACsBxD,EAAMqD,YAAYI,WAExC,gCACI,yCADJ,KACsBC,OAAOC,KAAK3D,EAAMqD,YAAYO,UAC3CrC,KAAI,SAAAsC,GACD,OAAO,cAAC,GAAD,CAAmBC,aAAcD,EAAKE,aAAc/D,EAAMqD,YAAYO,SAASC,IAAjEA,aAMnCG,GAAU,SAAC,GAAoC,IAAlCF,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC7B,OAAO,sBAAMzG,UAAWC,KAAOyG,QAAxB,UACH,4BAAIF,IADD,KACoB,4BAAIC,QAOpB3C,GAFKC,aAlFA,SAACrB,GAEjB,IAOA,EAA8BiC,oBAAS,GAAvC,oBAAKC,EAAL,KAAeC,EAAf,KAMA,OAKI,aAJA,CAIA,gBACI,gCACI,sBAAK7E,UAAWC,KAAO0G,UAAvB,UACI,qBAAKvG,IAAKsC,EAAMqD,YAAYa,OAAOC,OAASF,KAG5C,8BACKjE,EAAMoD,SAAW,uBAAOvI,KAAM,OAAQ6H,SAzBvC,SAACC,GACbA,EAAEyB,OAAOC,MAAMxE,QACfG,EAAMsE,UAAU3B,EAAEyB,OAAOC,MAAM,YA6B3B,cAAC,GAAD,CAAgB9H,OAAQyD,EAAMzD,OAAQkG,yBAA0BzC,EAAMyC,2BAEpEP,EAAW,cAAC,GAAD,CAA0BmB,YAAarD,EAAMqD,YAClBrE,SAzB9B,SAAChC,GACnBuH,QAAQC,IAAIxH,MAyBU,cAAC,GAAD,CAAaqG,YAAarD,EAAMqD,YAClBD,QAASpD,EAAMoD,QACflB,SAAW,WAAOC,GAAY,MAK1D,cAAC,GAAD,Y,SC9CVsC,G,mKAEF,WAMQ,IAAI1I,EAASuE,KAAKN,MAAM0E,MAAMC,OAAO5I,OAChCA,IACDA,EAAS,OAcbuE,KAAKN,MAAM4E,oBAAoB7I,GAC/BuE,KAAKN,MAAM6E,mBAAmB9I,K,+BAGtC,WACIuE,KAAKwE,kB,gCAGT,SAAmBC,EAAWC,EAAWC,GAClC3E,KAAKN,MAAM0E,MAAMC,OAAO5I,QAAUgJ,EAAUL,MAAMC,OAAO5I,QAC5DuE,KAAKwE,kB,oBAGT,WAGI,OAAKxE,KAAKN,MAAMqD,YAGZ,8BAGI,cAAC,GAAD,2BAAiB/C,KAAKN,OAAtB,IAA6BqD,YAAa/C,KAAKN,MAAMqD,YACzB9G,OAAQ+D,KAAKN,MAAMzD,OACnBkG,yBAA0BnC,KAAKN,MAAMyC,yBAErCW,SAAU9C,KAAKN,MAAM0E,MAAMC,OAAO5I,OAClCuI,UAAWhE,KAAKN,MAAMsE,eAXpB,cAAC,IAAD,CAAUzG,GAAK,iB,GAxC1B0C,IAAMC,WAmErC0E,GAAgCC,YAAWV,IAIhCjF,gBAZS,SAACzE,GAAD,MAAY,CAC5BsI,YAAatI,EAAMqK,YAAY/B,YAC/B9G,OAAQxB,EAAMqK,YAAY7I,OAC1B8I,gBAAiBtK,EAAM0E,KAAK1D,OAC5BmC,OAAQnD,EAAM0E,KAAKvB,UASH,CAAC0G,yBACDC,wBACApC,8BACA6B,gBAJT9E,CAKU0F,IC3EVI,GARE,WACb,OACI,4C,oBCAFC,GAAkB,sBAEpBlL,GAAe,CACfmL,aAAa,GA0BFC,GAvBW,WAAmC,IAAlC1K,EAAiC,uDAAzBV,GAAcW,EAAW,uCACxD,OAAQA,EAAOH,MACX,KAAK0K,GACD,OAAO,2BACAxK,GADP,IAEIyK,aAAa,IAErB,QACI,OAAOzK,I,SCdN2K,GAAe,SAAClF,GACzB,OAAO,SAACR,GACJ,OAAO,cAAC,IAAM2F,SAAP,CAAgBC,SAAU,cAAC,KAAD,IAA1B,SACH,cAACpF,EAAD,eAAeR,QCkFrB6F,GAAoBtF,IAAMuF,MAAK,kBAAM,iCACrCC,GAAgBxF,IAAMuF,MAAK,kBAAM,iCAGjCE,G,uKAEF,WAEI1F,KAAKN,MAAMiG,iB,oBAGf,WAAW,IAAD,OAIN,OAAK3F,KAAKN,MAAMwF,YAKR,sBAAKlI,UAAWC,KAAO2I,WAAvB,UACI,qBAAK5I,UAAWC,KAAO4I,IAAvB,SACI,cAAC,EAAD,MAEJ,sBAAK7I,UAAWC,KAAO6I,QAAvB,UACI,cAAC,IAAD,CAAOC,KAAK,iBAAiBC,OAAS,kBAAM,cAAC,EAAD,OAC5C,cAAC,IAAD,CAAOD,KAAK,WAAWC,OAAS,kBAAM,cAAC,GAAD,CAAkBC,SAAY,EAAKvG,MAAMwG,WAG/E,cAAC,IAAD,CAAOH,KAAK,SAASC,OAAQZ,GAAaK,MAC1C,cAAC,IAAD,CAAOM,KAAK,iCAAiCC,OAAS,kBAAM,cAAC,GAAD,OAI5D,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAQZ,GAAaG,MAC7C,cAAC,IAAD,CAAOQ,KAAK,SAASC,OAAS,kBAAM,cAAC,EAAD,OACpC,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAQhB,WApBrC,cAAC,KAAD,Q,GAZD/E,IAAMC,WA8CThB,gBAPS,SAACzE,GAAD,MAAY,CAChCyK,YAAazK,EAAM0L,IAAIjB,eAMa,CAACS,aFlHb,kBAAM,SAAC5H,GAC/B,IAAIqI,EAAUrI,EAASD,KACvBuI,QAAQC,IAAI,CAACF,IACZ/K,MAAM,WACH0C,EAPiC,CAACxD,KAAM0K,WEqHjC/F,CAA0CwG,IC/H1Ca,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpL,MAAK,YAAkD,IAA/CqL,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,uCCIVO,GAAWC,aAAgB,CAC3B1F,YAAaf,EACb0G,aAAczM,KACdsK,YAAaoC,KACb/H,KAAMjB,EACNK,KAAM4I,KACNhB,IAAKhB,KAKHiC,GAAmBC,OAAOC,sCAAwCC,KAClErB,GAAQsB,aAAYT,GAAUK,GAAiBK,aAAgBC,QAQrEL,OAAOM,UAAYzB,GAEJA,UC2Ff0B,IAAS5B,OAAO,cAAC,IAAM6B,WAAP,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAU3B,MAAOA,GAAjB,SACI,cAAC,GAAD,UAIR4B,SAASC,eAAe,SAG5CxB,M,sYCnIMyB,EAAS,iBACTC,EAAW,mBACXC,EAAY,oBACZC,EAAmB,2BACnBC,EAAiB,yBACjBC,EAAoB,4BACpBC,EAAmB,2BACnBC,EAAsB,8BACtBC,EAAa,qBACbC,EAAa,qBAwBf1O,EAAe,CACf2O,MAAO,GACPvN,SAAU,GACVwN,gBAAiB,EACjBzN,YAAa,EACb0N,WAAW,EACX7F,YAAa,KACb8F,mBAAoB,GACpB5M,OAAQ,IAIN6M,EAAuB,SAACC,EAAOC,EAAQC,EAAUC,GACnD,OAAOH,EAAM9H,KAAI,SAAAkI,GACb,OAAIA,EAAEF,KAAcD,EACT,2BAAIG,GAAMD,GAEdC,MAiGFC,EAAgB,SAAC3N,GAAD,MAAa,CAAElB,KAAMyN,EAAQvM,WAC7C4N,EAAkB,SAAC5N,GAAD,MAAa,CAAElB,KAAM0N,EAAUxM,WAEjD6N,EAAiB,SAACpO,GAAD,MAAkB,CAAEX,KAAM4N,EAAkBjN,gBAE7DqO,EAAkB,SAACX,GAAD,MAAgB,CAAErO,KAAM8N,EAAmBO,cAE7DY,EAA2B,SAACZ,EAAWnN,GAAZ,MAAwB,CAAElB,KAAMgO,EAAqBK,YAAWnN,WAClGqG,EAAY,SAAC7F,GAAD,MAAa,CAAE1B,KAAMiO,EAAYvM,WAmBtCwN,EAAuB,SAACvO,EAAaC,GAC9C,8CAAO,WAAO4C,GAAP,eAAAC,EAAA,6DACHD,EAASwL,GAAgB,IADtB,SAKctO,YAAYC,EAAaC,GALvC,OAKCI,EALD,OAMHwC,EAASwL,GAAgB,IACzBxL,GAjCiB2K,EAiCCnN,EAAKwN,MAjCK,CAAExO,KAAM2N,EAAWQ,WAkC/C3K,GAhC2B4K,EAgCCpN,EAAKmO,WAhCe,CAAEnP,KAAM6N,EAAgBuB,MAAOhB,KAwB5E,iCAxBuB,IAACA,EAFVD,IA0Bd,OAAP,uDAmCEkB,EAAc,uCAAG,WAAO7L,EAAUtC,EAAQoO,EAAWC,GAApC,SAAA9L,EAAA,6DACnBD,EAASyL,GAAyB,EAAM/N,IADrB,SAGFoO,EAAUpO,GAHR,OAKI,GALJ,OAKVwC,YACLF,EAAS+L,EAAcrO,IAE3BsC,EAASyL,GAAyB,EAAO/N,IARtB,2CAAH,4DAWPsO,EAAc,SAACtO,GACxB,8CAAO,WAAOsC,GAAP,eAAAC,EAAA,sDAEC6L,EAAYlO,IAAcqO,KAAKrO,KAInCiO,EAAe7L,EAAUtC,EAAQoO,EAHbT,GAHjB,2CAAP,uDAUSa,EAAgB,SAACxO,GAC1B,8CAAO,WAAOsC,GAAP,SAAAC,EAAA,sDAQH4L,EAAe7L,EAAUtC,EAAQI,IAAgBmO,KAAKnO,KAAkBwN,GARrE,2CAAP,uDAaS/E,EAAsB,SAAC7I,GAAD,8CAAY,WAAOsC,GAAP,eAAAC,EAAA,sEAE1BxC,YAAeC,GAFW,OAEvCF,EAFuC,OAK3CwC,EAlGqC,CAAExD,KAAM+N,EAAkBvF,YAkGvCxH,IALmB,2CAAZ,uDAStBgJ,EAAqB,SAAC9I,GAAD,8CAAY,WAAOsC,GAAP,eAAAC,EAAA,sEAEzBjC,YAAcN,GAFW,OAEtCF,EAFsC,OAI1CwC,EAAS+D,EAAUvG,IAJuB,2CAAZ,uDAOrB4G,EAA2B,SAAClG,GAAD,8CAAY,WAAO8B,GAAP,SAAAC,EAAA,sEAE/BhC,YAAoBC,GAFW,OAIxB,IAJwB,OAIvCgC,YACLF,EAAS+D,EAAU7F,IALyB,2CAAZ,uDAS3B+H,EAAY,SAACkG,GAAD,8CAAU,WAAOnM,GAAP,eAAAC,EAAA,sEAEdxB,YAAa0N,GAFC,OAIP,KAFpB3O,EAF2B,QAItB0C,YACLF,GAxHyB6F,EAwHCrI,EAAKA,KAAKqI,OAxHC,CAAErJ,KAAMkO,EAAY7E,YAmH9B,iCAnHH,IAACA,IAmHE,OAAV,uDASVsD,IAjOQ,WAAmC,IAAlCzM,EAAiC,uDAAzBV,EAAcW,EAAW,uCACrD,OAAQA,EAAOH,MACX,KAAKyN,EACD,OAAO,2BACAvN,GADP,IAiBIiO,MAAOI,EAAqBrO,EAAMiO,MAAOhO,EAAOe,OAAQ,KAAM,CAAC0O,UAAU,MAEjF,KAAKlC,EACD,OAAO,2BACAxN,GADP,IAeIiO,MAAOI,EAAqBrO,EAAMiO,MAAOhO,EAAOe,OAAQ,KAAM,CAAC0O,UAAU,MAEjF,KAAKjC,EACD,OAAO,2BAAKzN,GAAZ,IAAmBiO,MAAM,YAAKhO,EAAOgO,SAEzC,KAAKP,EACD,OAAO,2BAAK1N,GAAZ,IAAmBS,YAAaR,EAAOQ,cAE3C,KAAKkN,EACD,OAAO,2BAAK3N,GAAZ,IAAmBkO,gBAAiBjO,EAAOiP,QAE/C,KAAKtB,EACD,OAAO,2BAAK5N,GAAZ,IAAmBmO,UAAWlO,EAAOkO,YAEzC,KAAKN,EACD,OAAO,2BAAK7N,GAAZ,IAAmBsI,YAAarI,EAAOqI,cAE3C,KAAKwF,EACD,OAAO,2BACA9N,GADP,IAEIoO,mBAAoBnO,EAAOkO,UAAP,sBACVnO,EAAMoO,oBADI,CACgBnO,EAAOe,SACrChB,EAAMoO,mBAAmBuB,QAAO,SAAAnQ,GAAE,OAAIA,GAAMS,EAAOe,YAGjE,KAAK+M,EACD,OAAO,2BACA/N,GADP,IAEIwB,OAAQvB,EAAOuB,SAGvB,KAAKwM,EACD,OAAO,2BACAhO,GADP,IAEI4P,QAAQ,2BAAK5P,EAAM4P,SAAZ,IAAqBzG,OAAQlJ,EAAOkJ,WAGnD,QACI,OAAOnJ,K,gCCtInB,oEACO,IAAMuE,EAAgB,SAAAuD,GACzB,IAAIA,EAEJ,MAAO,oBAKEnE,EAAmB,SAACkM,GAAD,OAAe,SAAC/H,GAC5C,GAAIA,EAAMhD,OAAS+K,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,uOCerBC,EAAc,SAAC,GAAmC,EAAlCC,MAAmC,IAA5BC,EAA2B,EAA3BA,KAAgB/K,GAAW,EAArBgL,MAAqB,kBAEzDC,EAAYF,EAAKG,SAAWH,EAAKhM,MAEnC,OACI,cADK,CACL,OAAKzB,UAAWC,IAAOsB,KAAO,KAAOoM,EAAY1N,IAAOwB,MAAQ,KAAhE,UACOiB,EAAMmL,SACT,8BACKF,GAAa,+BAAQF,EAAKhM,cAM9BoC,EAAW,SAACnB,GACrB,IAAO8K,EAAoC9K,EAApC8K,MAAuBM,GAAapL,EAA7B+K,KAA6B/K,EAAvBgL,MAApB,YAA2ChL,EAA3C,IACA,OAAO,eAAC6K,EAAD,2BAAiB7K,GAAjB,kBAA0B,oDAAc8K,GAAWM,IAAnD,SAGEhM,EAAQ,SAACY,GAClB,IAAO8K,EAAoC9K,EAApC8K,MAAuBM,GAAapL,EAA7B+K,KAA6B/K,EAAvBgL,MAApB,YAA2ChL,EAA3C,IACA,OAAO,eAAC6K,EAAD,2BAAiB7K,GAAjB,kBAA0B,iDAAW8K,GAAWM,IAAhD,U,mBC7CXjO,EAAOC,QAAU,CAAC,KAAO,wBAAwB,MAAQ,yBAAyB,eAAiB,oC,mBCAnGD,EAAOC,QAAU,CAAC,KAAO,wB,mJCGnBiO,EAA6B,SAACtQ,GAAD,MAAY,CAC3CmD,OAAQnD,EAAM0E,KAAKvB,SAIVmD,EAAmB,SAACb,GAAe,IACtC8K,EADqC,4JAEvC,WAEI,OAAKhL,KAAKN,MAAM9B,OACT,cAACsC,EAAD,eAAeF,KAAKN,QADK,cAAC,IAAD,CAAUnC,GAAI,eAJX,GACX0C,IAAMC,WAUtC,OAF6BhB,YAAQ6L,EAAR7L,CAAoC8L,K,mBCjBrEnO,EAAOC,QAAU,CAAC,QAAU,yBAAyB,iBAAmB,kCAAkC,aAAe,8BAA8B,QAAU,yBAAyB,SAAW,0BAA0B,mBAAqB,oCAAoC,OAAS,wBAAwB,UAAY,2BAA2B,WAAa,4BAA4B,aAAe,8BAA8B,UAAY,2BAA2B,QAAU,2B,yCCDxd,MAA0B,sC,OCS1BmO,IAND,WACV,OAAO,8BACH,qBAAK7N,IAAK8N,Q,mBCJlBrO,EAAOC,QAAU,CAAC,WAAa,wBAAwB,IAAM,iBAAiB,QAAU,uB,mBCAxFD,EAAOC,QAAU,CAAC,KAAO,4BAA4B,OAAS,iC","file":"static/js/main.dee4d614.chunk.js","sourcesContent":["//добавляем так же как в state.js\r\nconst ADD_MESSAGE_BUTTON_BLL = \"mess/ADD_MESSAGE_BUTTON_BLL\";\r\n// убрали после того как добавили форму\r\n// const UPDATE_TEXT_MESSAGE_CHANGE = \"UPDATE_TEXT_MESSAGE_CHANGE\";\r\n\r\nlet initialState = {\r\n    MesDataName: [\r\n        {id: 1, name: \"name1\"},\r\n        {id: 2, name: \"name2\"},\r\n        {id: 3, name: \"name3\"},\r\n        {id: 4, name: \"name4\"}\r\n    ],\r\n    MesDataItem: [\r\n        {id: 1, item: \"item1\"},\r\n        {id: 2, item: \"item2\"},\r\n        {id: 3, item: \"item3\"},\r\n        {id: 4, item: \"item4\"}\r\n    ],\r\n        // создали newPostData для принятия новых значений поля textarea\r\n    // newMessageData: \"hard code message\", // убрали после того как добавили форму\r\n};\r\n\r\nexport const messagesReducer = (state = initialState, action) => {\r\n    // if (action.type === ADD_MESSAGE_BUTTON_BLL) {\r\n    //     {\r\n    //         let newMessage = {\r\n    //             id: 5,\r\n    //             item: state.newMessageData\r\n    //         }\r\n    //         state.MesDataItem.push(newMessage);\r\n    //         if (state.newMessageData === \"\") {state.MesDataItem.pop(newMessage) };\r\n    //         state.newMessageData = \"\";\r\n    //         // this._callSubscriber(this._state);\r\n    //     }\r\n    // } else if (action.type === UPDATE_TEXT_MESSAGE_CHANGE) {\r\n    //     state.newMessageData = action.newMessage;\r\n    //     // this._callSubscriber(this._state);\r\n    // }\r\n    //когда у нас дискретный(не бесконечный) набор чисел, можно применять switch\r\n    // switch (action.type) {\r\n    //     case ADD_MESSAGE_BUTTON_BLL:{\r\n    //         let newMessage = {\r\n    //             id: 5,\r\n    //             item: state.newMessageData\r\n    //         };\r\n    //         let stateCopy = {\r\n    //             ...state,\r\n    //             MesDataItem: [...state.MesDataItem]\r\n    //         };\r\n    //         stateCopy.MesDataItem.push(newMessage);\r\n    //         if (stateCopy.newMessageData === \"\") { stateCopy.MesDataItem.pop(newMessage) };\r\n    //         stateCopy.newMessageData = \"\";\r\n    //         //возвращаем изменения\r\n    //         return stateCopy;\r\n    //     }\r\n    //     case UPDATE_TEXT_MESSAGE_CHANGE:{\r\n    //         let stateCopy = {...state};\r\n    //         stateCopy.newMessageData = action.newMessage;\r\n    //         //возвращаем изменения\r\n    //         return stateCopy;\r\n    //     }\r\n    //     //если ничего не изменилось то возвращаем старый state\r\n    //     default:\r\n    //         return state;\r\n    // }\r\n    //переносим return в каждый case\r\n    // return state;\r\n\r\n    //переписываем оптимизируя\r\n    switch (action.type) {\r\n        // убрали после того как добавили форму\r\n        // case UPDATE_TEXT_MESSAGE_CHANGE:\r\n        //         return {\r\n        //             ...state,\r\n        //             newMessageData: action.newMessageText, //модифицируем копию\r\n        //         };\r\n        case ADD_MESSAGE_BUTTON_BLL:\r\n            // заменили после того как добавили форму\r\n            // let newMessage = state.newMessageData; //достаём текст\r\n            let newMessage = action.newTextMessage; //достаём текст\r\n            return {\r\n                ...state,\r\n                // убрали после того как добавили форму\r\n                // newMessageData: \"\", //затираем\r\n                MesDataItem: [...state.MesDataItem, {id: 5, item: newMessage}] //такой синтаксис push ...., {id:5, item: newMessage} \r\n            };\r\n        //если ничего не изменилось то возвращаем старый state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// заменили после того как добавили форму\r\n// export const addMessageButtonUIAC = () => ({type: ADD_MESSAGE_BUTTON_BLL})\r\nexport const addMessageButtonUIAC = (newTextMessage) => ({type: ADD_MESSAGE_BUTTON_BLL, newTextMessage})\r\n// убрали после того как добавили форму\r\n// export const textChangeAC = (text) => ({type: UPDATE_TEXT_MESSAGE_CHANGE, newMessageText: text})\r\n\r\nexport default messagesReducer;\r\n","import * as axios from 'axios'; //* импортируем всё что есть в библиотеке axios\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"b945a48b-e23b-46ca-a66f-5493b89d60ce\"\r\n    }\r\n});//Инстансы (ООП), настраиваем его что бы он работал взамен axios\r\n\r\nexport const apiGetUsers = (carrentPage, pageSize) => {\r\n    // return axios.get(baseUrl + `users?page=${carrentPage}&count=${pageSize}`,\r\n    return instance.get(`users?page=${carrentPage}&count=${pageSize}`) //baseURL подставляется автомотически перед users?\r\n        .then(response => response.data); // это ПРОМИС! Тут мы говорим, \r\n        //возвращяй нам не тот промис который мы получаем методом get\r\n        //мы из полученного response берём data, и возращяем data\r\n        //в итоге мы ретурним не то что вернул нам get, а то что вернул нам then\r\n        //а then нам вернул другой промис\r\n        //буквально мы написали return response.data\r\n    }\r\n\r\n//просмотр профиля пользователя\r\nexport const apiUsersRouter = (userId) => {\r\n    // return axios.get(baseUrl + `profile/` + userId) \r\n    return instance.get(`profile/` + userId) //baseURL подставляется автомотически перед profile/\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiAuthProfile = () => {\r\n    // return axios.get(baseUrl + `auth/me`, \r\n    return instance.get(`auth/me`) //baseURL подставляется автомотически перед auth/me\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiFollowUser = (userId) => {\r\n    return instance.post(`follow/${userId}`, {}) //instance подставляется автомотически и headers тоже\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiUnfollowUser = (userId) => {\r\n    return instance.delete(`follow/${userId}`) //instance подставляется автомотически и headers тоже\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiStatusInfo = (userId) => {\r\n    return instance.get(`profile/status/` + userId)\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiUpdateStatusInfo = (status) => {\r\n    return instance.put(`profile/status/`, {status: status}) // put означает обновление. {status: status} смотрим в АПИшке какие данные нужно изменять\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiLogin = (email, password, rememberMe = false ) => {\r\n    return instance.post(`auth/login/`, {email, password, rememberMe})\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiLogout = () => {\r\n    return instance.delete(`auth/login/`)\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiSavePhoto = (photoFile) => {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", photoFile);\r\n    \r\n    return instance.put(`profile/photo`, formData, {\r\n        headers: {\r\n            \"Content-Type\": \"multipart/form-data\"\r\n        }\r\n    })\r\n    .then(response => response.data);\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Navigation_main__fLMFe\",\"item\":\"Navigation_item__3P5ze\",\"activeLink\":\"Navigation_activeLink__2EDob\"};","export default __webpack_public_path__ + \"static/media/logo.38dd95ae.png\";","import React from 'react';\r\nimport ModCSS from \"./Navigation.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport Logo from \"./../../logo.png\";\r\nimport { NavLink } from \"react-router-dom\"; // импорт с фигурными скобками из-за экспорта не по дефолту\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <div className={ModCSS.main}>\r\n            <div className={ModCSS.logo}>\r\n                <img src={Logo} alt=\"Logo\" />\r\n                <h1> Сообщество умных людей</h1>\r\n            </div>\r\n            <div>\r\n                {/* для Route тут должны быть ссылки*/}\r\n                <div className={ModCSS.item}>\r\n                    {/* принудительно создали класс activeClassName(activeLink)*/}\r\n                    {/* создали NavLink для обработки ссылок без перезагрузки всей страницы  */}\r\n                    <NavLink to=\"/Authorization\" activeClassName={ModCSS.activeLink}>Authorization</NavLink>\r\n                </div>\r\n                <div className={ModCSS.item}>\r\n                    <NavLink to=\"/ProfileInfoContainer\" activeClassName={ModCSS.activeLink}>Profile</NavLink>\r\n                </div>\r\n                <div className={ModCSS.item}>\r\n                    <NavLink to=\"/Users\" activeClassName={ModCSS.activeLink}>Users</NavLink>\r\n                </div>\r\n                <div className={ModCSS.item}>\r\n                    <NavLink to=\"/Messages\" activeClassName={ModCSS.activeLink}>Messages</NavLink>\r\n                </div>\r\n                \r\n                <div className={ModCSS.item}>\r\n                    <NavLink to=\"/Settings\" activeClassName={ModCSS.activeLink}>Settings</NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import { apiAuthProfile, apiLogin, apiLogout } from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\"\r\n\r\nconst SET_AUTH_USER_DATA = \"auth/SET_AUTH_USER_DATA\";\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false, //состояние пока не авторизован\r\n};\r\n\r\n// добавили isAuth для логинизации\r\n// export const setAuthUserData = (userId, login, email) => ({ type: SET_AUTH_USER_DATA, data: { userId, login, email } })\r\nexport const setAuthUserData = (userId, login, email, isAuth) => ({ type: SET_AUTH_USER_DATA, data: { userId, login, email, isAuth } })\r\n\r\n// ниже сделали рефакторинг через async await. измегить везде где есть then\r\n// export const authProfileThunk = () => {\r\n//     return (dispatch) => {\r\n//         // apiAuthProfile().then(data => { изменили, так как диспатчим этот промисв app\r\n//             return apiAuthProfile().then(data => {\r\n//             //resultCode проверка полученных данных(проверка залогининости)\r\n//             if (data.resultCode === 0) {\r\n//                 // let {id, login, email} = response.data.data; //две data потому-что 1я data сидит в инструкции API, 2ю выдаёт response\r\n//                 let { id, login, email } = data.data; //две data потому-что 1я data сидит в инструкции API, 2ю выдаёт response\r\n//                 // dispatch(setAuthUserData(id, login, email));\r\n//                 dispatch(setAuthUserData(id, login, email, true)); // добавили true для логинизации\r\n//             }\r\n\r\n//         });\r\n//     }\r\n// }\r\n\r\nexport const authProfileThunk = () => async (dispatch) => {\r\n\r\n    let data = await apiAuthProfile();\r\n\r\n    if (data.resultCode === 0) {\r\n        let { id, login, email } = data.data; \r\n        dispatch(setAuthUserData(id, login, email, true)); \r\n    }\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n            // debugger\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                // isAuth: true // убрали после реализации логинизации\r\n\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// всё что после dispatch это САНКА\r\nexport const LoginThunkCreator = (email, password, rememberMe) => async (dispatch) => {\r\n    let data = await apiLogin(email, password, rememberMe)\r\n\r\n    if (data.resultCode === 0) {\r\n                dispatch(authProfileThunk());\r\n            }\r\n            // проверка авторизвции\r\n            else {\r\n                // берём ошибку из ответа сервера. Если messages > 0 то мы выведем первое сообщение messages[0]. Иаче покажем Some error\r\n                let errorMessage = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n                dispatch(stopSubmit (\"login\", {_error: errorMessage}));\r\n            }\r\n}\r\n\r\nexport const LogoutThunkCreator = () => async (dispatch) => {\r\n    let data = await apiLogout()\r\n\r\n    if (data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport {requiredField, maxLengthCreator} from \"../form/validators\";\r\nimport {Input} from \"../form/formsControls\"\r\nimport ModCSS from \"./formStyle.module.css\"; //Модифицируем наши стили с помощью .module\r\n\r\n// вынесли в переменную. так как если сразу добавить в validate, то это вызывает зависание\r\nconst maxLength20 = maxLengthCreator(20);\r\n\r\n//ниже JSX коде в котором находится HTML разметка\r\n// Field это специальные компоненты для form\r\n// handleSubmit получаем из стандартных свойств формы, из reduxForm. Этим мы говорим, что хотим доверить обработку onSubmit\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name=\"email\" \r\n                    placeholder={\"Email\"} \r\n                    component={Input}\r\n                    validate={[requiredField, maxLength20]} /> \r\n            </div>\r\n            <div>\r\n                <Field name=\"password\" \r\n                    placeholder={\"Password\"} \r\n                    component={Input}\r\n                    validate={[requiredField, maxLength20]} />\r\n            </div>\r\n            <div>\r\n                <Field name=\"rememberMe\" \r\n                    type={\"checkbox\"} \r\n                    component={\"input\"} /> Remember\r\n            </div>\r\n                {/* тут мы говорим, если у нас есть props.error тогда покажи {props.error} */}\r\n                {error && <div className={ModCSS.loginFormError}>\r\n                    {error}\r\n                </div>\r\n                }\r\n            <div>\r\n                <button> OK </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n//HOC\r\nconst ReduxLoginForm = reduxForm ({\r\n    form: \"login\" //уникальное имя для формы\r\n}) (LoginForm)\r\n\r\nexport default ReduxLoginForm;\r\n","import React from 'react';\r\n// import ModCSS from \"./Authorization.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport ReduxLoginForm from \"../../form/loginForm\"\r\nimport { connect } from 'react-redux';\r\nimport { LoginThunkCreator } from '../../redux/auth-reducer';\r\nimport { Redirect } from \"react-router\";\r\n\r\n//ниже JSX коде в котором находится HTML разметка\r\nconst Login = (props) => {\r\n\r\n    const onSubmitHandl = (formData) => {\r\n            // console.log(formData); //formData, все значения из формы\r\n        // изменяем под логинизацию\r\n        props.LoginThunkCreator(formData.email, formData.password, formData.rememberMe);\r\n        } // тут мы из пропсов вызываем LoginThunkCreator. Он приходит через connect.\r\n        // Но connect вызывает не LoginThunkCreator, а его диспатч authProfileThunk\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to = \"/ProfileInfoContainer\" />\r\n    }\r\n            \r\n            // вызываем другой onSubmit и получаем из формы LoginForm параметры handleSubmit\r\n    return (\r\n        <div>\r\n        <h3>LOGIN</h3>\r\n            <ReduxLoginForm onSubmit={onSubmitHandl} /> \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\n// export default Login;\r\n// HOC для логинизации. apiLogin прийдёт к нам в пропсы в Login\r\nexport default connect (mapStateToProps, {LoginThunkCreator}) (Login);\r\n","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\"; \r\nimport Login from \"./login\"\r\n\r\n\r\n//\r\nconst Auth = (props) => {\r\n    return (\r\n        <div>\r\n            {/* изменили после логинизации */}\r\n            {/* {props.isAuth ? props.login\r\n                : <NavLink to={\"/Login\"}>\r\n                    <Login />\r\n                    </NavLink>} */}\r\n\r\n            {props.isAuth\r\n                ? <div>{props.login} <button onClick={props.LogoutThunkCreator}>\r\n                                            Log out</button> </div>\r\n                : <NavLink to={\"/login\"}> <Login /> </NavLink>}\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;","import React from 'react';\r\nimport ModCSS from \"./Authorization.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport { connect } from 'react-redux';\r\n// import {authProfileThunk, LogoutThunkCreator} from \"../../redux/auth-reducer\" // authProfileThunk перенесли в app.js\r\nimport {LogoutThunkCreator} from \"../../redux/auth-reducer\"\r\nimport Auth from \"./auth\"\r\n\r\n//ниже JSX коде в котором находится HTML разметка\r\n// const AuthContainer = () => {\r\n//     return (\r\n//         // добавляем к HTML разметке JS код. Было className=\"item\", стало {ModCSS.item}\r\n//         // применяем шаблонные строки для конкатенации выражения {`${} ${}`}\r\n//         <div>\r\n//             <div className={`${ModCSS.item} ${ModCSS.active}`}>\r\n//                 <Login />\r\n//             </div>\r\n//             {/* <div className={ModCSS.item}>\r\n//                 Registration\r\n//             </div> */}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\nclass AuthContainer extends React.Component {\r\n    \r\n    componentDidMount() {\r\n        //перекинули запрос в api.js apiAuthProfile\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, \r\n        // {withCredentials: true}) //вторым параметром , {} передаём настройки запроса withCredentials что бы куки видели из другого сайта что мы авторизованны\r\n        // apiAuthProfile().then(response => {\r\n            //\r\n        // apiAuthProfile().then(data => {\r\n        //     // debugger\r\n        //     // if (response.data.resultCode === 0) {\r\n        //     if (data.resultCode === 0) {\r\n        //         // let {id, login, email} = response.data.data; //две data потому-что 1я data сидит в инструкции API, 2ю выдаёт response\r\n        //         let {id, login, email} = data.data; //две data потому-что 1я data сидит в инструкции API, 2ю выдаёт response\r\n        //         this.props.setAuthUserData (id, login, email);\r\n        //     }\r\n                    // });\r\n                \r\n        //когда компонента функциональная мы пропсы запрашиваем напрямую через props.\r\n        //когда компонента классовая мы пропсы запрашиваем через this.props.\r\n        // this.props.authProfileThunk() // перенесли в app.js\r\n    }\r\n    \r\n    render () {\r\n        return (\r\n            <div className={`${ModCSS.item} ${ModCSS.active}`}>\r\n               <Auth {...this.props} />\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\n// изменили после логинизации\r\n// export default connect (mapStateToProps, {authProfileThunk}) (AuthContainer);\r\n// export default connect (mapStateToProps, {authProfileThunk, LogoutThunkCreator}) (AuthContainer); // authProfileThunk перенесли в app.js\r\nexport default connect (mapStateToProps, {LogoutThunkCreator}) (AuthContainer);\r\n","//добавляем так же как в state.js\r\nconst ADD_POST_BLL = \"post/ADD_POST_BLL\";\r\n// убрали после того как добавили форму\r\n// const UPDATE_POST_CHANGE = \"UPDATE_POST_CHANGE\";\r\n\r\n\r\n//так как redux запускается до нашего state, мы не успеваем отобразить state и мы получаем ошибку\r\nlet initialState = {\r\n    postData: [\r\n        { id: 1, text: \"text1\", like: 10 },\r\n        { id: 2, text: \"text2\", like: 20 },\r\n        { id: 3, text: \"Bi\", like: 30 },\r\n        { id: 4, text: \"Mi\", like: 40 }\r\n    ],\r\n    // создали newPostData для принятия новых значений поля textarea\r\n    // newPostData: \"hard code textarea\", // убрали после того как добавили форму\r\n};\r\n\r\nconst myPostReducer = (state = initialState, action) => {\r\n//     if (action.type === ADD_POST_BLL) {\r\n//         {let newPost = {\r\n//             id: 5, \r\n//             // удалили postMessage, будем брать его через state\r\n//             // text: postMessage, \r\n//             text: state.newPostData, \r\n//             like: 50,\r\n//             }\r\n//             // this._state.myPostsPage.postData.push(newPost);\r\n//             //так как myPostsPage к нам приходит из state, меняем запись\r\n//             state.postData.push(newPost);\r\n//         // не добавлять пустой textarea\r\n//         // if (this._state.myPostsPage.newPostData === \"\"){this._state.myPostsPage.postData.pop(newPost)};\r\n//         //так как myPostsPage к нам приходит из state, меняем запись\r\n//         if (state.newPostData === \"\"){state.postData.pop(newPost)};\r\n//         //очищаем поле textarea\r\n//         // this._state.myPostsPage.newPostData = \"\";\r\n//         //так как myPostsPage к нам приходит из state, меняем запись\r\n//         state.newPostData = \"\";\r\n//         // обновляем страницу с новыми данными через reRenderEntireTree\r\n//         //при работе через reducer _callSubscriber уже тут не нужен\r\n//         // this._callSubscriber(this._state);\r\n//         }\r\n//     } else if (action.type === UPDATE_POST_CHANGE) {\r\n//         //добавили action к newText, так как этот параметр больше не может прийти через updatePostChange(newText)\r\n//         // this._state.myPostsPage.newPostData = action.newText;\r\n//         state.newPostData = action.newText;\r\n//         // this._callSubscriber(this._state); // вызываем reRenderEntireTree\r\n// }\r\n    //когда у нас дискретный(не бесконечный) набор чисел, можно применять switch\r\n//     switch (action.type) {\r\n//         case ADD_POST_BLL:\r\n//             let newPost = {\r\n//                 id: 5, \r\n//                 text: state.newPostData, \r\n//                 like: 50,\r\n//             }\r\n//             state.postData.push(newPost);\r\n//             if (state.newPostData === \"\"){state.postData.pop(newPost)};\r\n//             state.newPostData = \"\";\r\n//             return state;\r\n//         case UPDATE_POST_CHANGE:\r\n//             state.newPostData = action.newText;\r\n//             return state;\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n//применяем копирование объекта\r\n    // switch (action.type) {\r\n    //     case ADD_POST_BLL:{\r\n    //         let newPost = {\r\n    //             id: 5, \r\n    //             text: state.newPostData, \r\n    //             like: 50,\r\n    //         }\r\n    //         //создаём копию объекта\r\n    //         let stateCopy = {...state};\r\n    //         //добираемся до вложенного массива\r\n    //         stateCopy.postData = [...state.postData];\r\n    //         //добавляем посты уже в новую копию\r\n    //         stateCopy.postData.push(newPost);\r\n    //         if (stateCopy.newPostData === \"\"){stateCopy.postData.pop(newPost)};\r\n    //         stateCopy.newPostData = \"\";\r\n    //         return stateCopy;\r\n    //     }\r\n    //     case UPDATE_POST_CHANGE:{\r\n    //         let stateCopy = {...state};\r\n    //         // stateCopy.postData = [...state.postData];\r\n    //         stateCopy.newPostData = action.newText;\r\n    //         return stateCopy;\r\n    //     }\r\n    //     default:\r\n    //         return state;\r\n    // }\r\n    \r\n    ///переписываем оптимизируя\r\n    switch (action.type) {\r\n        // убрали после того как добавили форму\r\n        // case UPDATE_POST_CHANGE:\r\n        //     return {\r\n        //         ...state,\r\n        //         newPostData: action.newText\r\n        //     };\r\n        case ADD_POST_BLL:\r\n            let newPost = {\r\n                id: 5, \r\n                // заменили после того как добавили форму\r\n                // text: state.newPostData, \r\n                text: action.newTextPost, \r\n                like: 50,\r\n            };\r\n            // if (newPost === \"\"){state.myPostsPage.postData.slice(newPost)};\r\n            return {\r\n                ...state,\r\n                // убрали после того как добавили форму\r\n                // newPostData: \"\",\r\n                postData: [...state.postData, newPost]\r\n                // реализовать не добавлять пустой textarea\r\n                //if (state.myPostsPage.newPostData === \"\"){state.myPostsPage.postData.pop(newPost)};\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// заменили после того как добавили форму\r\n// export const addPostUIActionCreator = () => ({type: ADD_POST_BLL})\r\nexport const addPostUIActionCreator = (newTextPost) => ({type: ADD_POST_BLL, newTextPost})\r\n// убрали после того как добавили форму\r\n// export const postChangeActionCreator = (text) => ({type: UPDATE_POST_CHANGE, newText: text})\r\n\r\nexport default myPostReducer;\r\n","import React from 'react';\r\nimport ModCSS from \"./../MyPosts.module.css\"; //Модифицируем наши стили с помощью .module\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={ModCSS.item}>\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\" />\r\n                {/* принимаем атрибуты через пропсы из MyPosts */}\r\n                {`${props.text} ${props.like}`}\r\n                <div>\r\n                    <button>Like</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport {requiredField, maxLengthCreator} from \"../form/validators\";\r\nimport {Textarea} from \"../form/formsControls\"\r\n\r\n// вынесли в переменную. так как если сразу добавить в validate, то это вызывает зависание\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\n//ниже JSX коде в котором находится HTML разметка\r\n// Field это специальные компоненты для form\r\n// handleSubmit получаем из стандартных свойств формы, из reduxForm. Этим мы говорим, что хотим доверить обработку onSubmit\r\nconst PostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newTextPost\" \r\n                        placeholder={\"add your text post\"} \r\n                        // заменили потомучто, когда указываем свои кастомные элементы, пишем без кавычек\r\n                        // component={\"textarea\"}\r\n                        component={Textarea}\r\n                        validate={[requiredField, maxLength10]} /> \r\n            </div>\r\n                <div>\r\n                    <button> Add post </button>\r\n                </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n//HOC\r\nconst ReduxPostForm = reduxForm ({\r\n    form: \"post\" //уникальное имя для формы\r\n}) (PostForm)\r\n\r\nexport default ReduxPostForm;\r\n","import React from 'react';\r\nimport ModCSS from \"./MyPosts.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport Post from './Post/Post';\r\nimport { withAuthRedirect } from \"../../hoc/authRedirect\";\r\nimport ReduxPostForm from \"../../form/postForm\";\r\n\r\n\r\n\r\nconst MyPosts = (props) => {\r\n// debugger\r\n    // переносим массив в app.js\r\n    // let postData = [\r\n    //     { id: 1, text: \"text1\", like: \"10\" },\r\n    //     { id: 2, text: \"text2\", like: \"20\" },\r\n    //     { id: 3, text: \"Bi\", like: \"30\" },\r\n    //     { id: 4, text: \"Mi\", like: \"40\" }\r\n    // ];\r\n\r\n            {/* экспортируем компоненту Post */}\r\n            {/* передаём атрибуты компоненте, через пропсы */}\r\n            {/* <Post text=\"Hello\" like=\"10\" />\r\n            <Post text=\"You cool\" like=\"20\" /> */}\r\n            {/* в этом способе данные берем из массива с объектами */}\r\n            {/* <Post text={postData[2].text} like={postData[2].like} />\r\n            <Post text={postData[3].text} like={postData[3].like} /> */}\r\n\r\n    // добавляем props. к postData.map чтобы передать пропсы из index.js\r\n    let postDataEl = props.postData\r\n    .map(post => (<Post text={post.text} \r\n                        like={post.like}\r\n                        key={post.id} />))\r\n\r\n    // просим React создать ссылку\r\n    // убрали после того как добавили форму\r\n    // let newPostEl = React.createRef();\r\n\r\n    // создаём переменную которая будет отправлять новые значения в BLL\r\n    // убрали после того как добавили форму\r\n    // let addPostChange = () => {\r\n    //     let text = newPostEl.current.value;\r\n    //     // props.updatePostChange (text); // меняем на dispatch\r\n    //     // props.dispatch ({ type: \"UPDATE-POST-CHANGE\", newText: text})\r\n    //     //создали функцию addPostUIActionCreator которая будет передоваться в BLL\r\n    //     //убрали после создания MyPostsContainer\r\n    //     // props.dispatch(postChangeActionCreator(text))\r\n    //     props.updatePostChange(text);\r\n    // }\r\n\r\n    // считываем поле textarea с помощью addPostUI\r\n    // запускаем функцию addPostBLL из index.js\r\n    // убрали после того как добавили форму\r\n    // let addPostUI = () => {\r\n    //     // нет смысла отправлять текст в addPostUI\r\n    //     // let text = newPostEl.current.value;\r\n    //     // закеоментировали let text\r\n    //     // props.addPostBLL(text);\r\n    //     // props.addPostBLL(); // меняем на dispatch\r\n    //     // props.dispatch ({ type: \"ADD-POST-BLL\"})\r\n    //     //создали функцию addPostUIActionCreator которая будет передоваться в BLL\r\n    //     //убрали после создания MyPostsContainer\r\n    //     // props.dispatch(addPostUIActionCreator());\r\n    //     props.addPostBLL()\r\n    // }\r\n\r\n    // вынес пропс в переменную\r\n    // убрали после того как добавили форму\r\n    // let newPostDataRemove = props.newPostData;\r\n\r\n    //добавили для формы\r\n    const onSubmitHandl = (values) => {// values, значения из формы\r\n        props.addPostBLL(values.newTextPost)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n\r\n            {/* <div> реализовать отображения своего профиля\r\n                <img src={props.profileInfo.photos.large}/>\r\n                <Status status = {props.status} getUpdateStatusInfoThunk={props.getUpdateStatusInfoThunk}/> \r\n                {props.profileInfo.fullName}\r\n            </div> */}\r\n\r\n            <div className={ModCSS.item}>\r\n                <div className={ModCSS.header}><h3>My posts</h3></div>\r\n\r\n                {/* перенесли в MessageForm */}\r\n                {/* <div>\r\n                    <textarea onChange={addPostChange} \r\n                                ref={newPostEl} \r\n                                value={newPostDataRemove} />\r\n                </div> */}\r\n                {/* <div> */}\r\n                    {/* добавили событие onClick, и передали ей функцию addPost */}\r\n                    {/* <button onClick={addPostUI}>\r\n                            Add post</button>\r\n                </div> */}\r\n\r\n                {/* добавляем форму */}\r\n                <div>\r\n                    <ReduxPostForm onSubmit={onSubmitHandl} /> \r\n                </div>\r\n            </div>\r\n            { postDataEl }\r\n        </div>\r\n    );\r\n};\r\n\r\n//доступ только авторизованным\r\nlet authAccessHOC  = withAuthRedirect(MyPosts); \r\n\r\nexport default authAccessHOC;\r\n","// изменили после того как добавили форму\r\n// import {addPostUIActionCreator, postChangeActionCreator} from '../../redux/myPost-reducer';\r\nimport {addPostUIActionCreator} from '../../redux/myPost-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\n// const MyPostsContainer = (props) => {\r\n//     // debugger\r\n//     // считываем поле textarea с помощью addPostUI\r\n//     // запускаем функцию addPostBLL из index.js\r\n//     let addPostUI = () => {\r\n//         // нет смысла отправлять текст в addPostUI\r\n//         // let text = newPostEl.current.value;\r\n//         // закеоментировали let text\r\n//         // props.addPostBLL(text);\r\n//         // props.addPostBLL(); // меняем на dispatch\r\n//         // props.dispatch ({ type: \"ADD-POST-BLL\"})\r\n//         //создали функцию addPostUIActionCreator которая будет передоваться в BLL\r\n//         props.newState.dispatch(addPostUIActionCreator());\r\n//     }\r\n\r\n//     // создаём переменную которая будет отправлять новые значения в BLL\r\n//     let onPostChange = (text) => {\r\n//         props.newState.dispatch(postChangeActionCreator(text))\r\n//     }\r\n//     //необходимая переменная для пропсов\r\n//     let state = props.newState.getState();\r\n    \r\n//     return (\r\n//         <MyPosts updatePostChange = {onPostChange} \r\n//                 addPostBLL = {addPostUI}\r\n//                 postData = {state.myPostsPage.postData}\r\n//                 newPostData = {state.myPostsPage.newPostData} />\r\n//     );\r\n// };\r\n\r\n//реализация контейнера через react-redux\r\n//настраиваем функции для Provider\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        postData: state.myPostsPage.postData,\r\n        newPostData: state.myPostsPage.newPostData\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // убрали после того как добавили форму\r\n        // updatePostChange: (text) => {\r\n        //     dispatch(postChangeActionCreator(text));\r\n        // },\r\n\r\n        // заменили после того как добавили форму\r\n        // addPostBLL: () => {\r\n        //     dispatch(addPostUIActionCreator());\r\n        // }\r\n        addPostBLL: (newTextPost) => {\r\n            dispatch(addPostUIActionCreator(newTextPost));\r\n        }\r\n    }\r\n};\r\n\r\n//получаем store через Provider без лишних функций\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ModCSS from \"./Profile.module.css\"; //Модифицируем наши стили с помощью .module\r\n\r\nconst StatusWithHook = (props) => {\r\n\r\n    // ниже переписываем в короткий вид\r\n    // let stateWithSetState = useState(false); // нам useState вщзвращает массив из двух элементов. первым элементом будет сидеть значение [0], вторым элементо будет ф-я которое это значение устанавливает\r\n    //                                         // достаем из массива первое значение [0]\r\n    //                                         // сто старта это будет false\r\n    // let editMode = stateWithSetState[0];\r\n    // let setEditMode = stateWithSetState[1]; //вторым элементом сидит функуия которая будет изменять значение editMode\r\n\r\n    let [editMode, setEditMode] = useState(false); // меняем вызов статуса\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    // мы говорим реакту запускать нашь useEffect не всегда,\r\n    // а только в момент когда компонента монтировалась в первый раз\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] ) // [props.status] этим мы говорим, useEffect запускайся каждый раз когда будет изменён props.status\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false);\r\n        props.getUpdateStatusInfoThunk(status);\r\n    }\r\n    \r\n    const onStatusChenge = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status</b>: <span onDoubleClick={activatedEditMode}>\r\n                        {props.status || \"---\"} </span>\r\n                    \r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div >\r\n                    <input autoFocus={true}\r\n                            onBlur={deActivatedEditMode}\r\n                            onChange={onStatusChenge}\r\n                            value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatusWithHook;","export default __webpack_public_path__ + \"static/media/userPhoto.c22a77fb.png\";","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\n\r\nconst DescriptionForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit} >\r\n        <div>\r\n            <button> save </button>\r\n        </div>\r\n        <div>\r\n            <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Checkbox)}\r\n        </div>\r\n        <div>\r\n            <b>My skylls</b>: {createField(\"My skylls\", \"mySkylls\", [], TextareaForm)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {createField(\"About me\", \"amoutMe\", [], TextareaForm)}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst createField = (placeholder, name, validators, component) => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n                name={name}\r\n                validators={validators}\r\n                component={component} />\r\n    </div>\r\n)\r\n\r\nconst Input = () => {\r\n    return <div>\r\n        <input />\r\n    </div>\r\n}\r\n\r\nconst Checkbox = () => {\r\n    return <div>\r\n        <input type=\"checkbox\" />\r\n    </div>\r\n}\r\n\r\nconst TextareaForm = () => {\r\n    return <div>\r\n        <textarea />\r\n    </div>\r\n}\r\n\r\nconst DescriptionFormReduxForm = reduxForm({form: \"edit-form\"})(DescriptionForm)\r\n\r\nexport default DescriptionFormReduxForm\r\n","import React, { useState } from 'react';\r\n// import ModCSS from \"./Profile.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport { withAuthRedirect } from \"../../hoc/authRedirect\";\r\nimport StatusWithHook from \"./statusWithHook\";\r\nimport MyPostsContainer from \"../MyPosts/MyPostsContainer\";\r\nimport userPhoto from \"../../userPhoto.png\"\r\nimport ModCSS from \"./Profile.module.css\";\r\nimport DescriptionFormReduxForm from \"./descriptionForm\"\r\n\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    const photoSelect = (e) => {\r\n        if (e.target.files.length) { // e.target.files.length - тут говорится, если длинна у файла есть\r\n            props.savePhoto(e.target.files[0]) // то тогда вызываем какойто колбэк (savePhoto) и передаём этот файл во внешний мир [0]\r\n        }\r\n\r\n    }\r\n\r\n    let [editMode, setEditMode] = useState(false); // редактирование формы\r\n\r\n    const onSubmitHandl = (formData) => {\r\n        console.log(formData)\r\n    }\r\n\r\n    return (\r\n        // данные тут не отобразятся, пока не прогрузится сервер (дословно не могу понять как объяснить). \r\n        // Но прогрузится он не может. И в profileInfo будет null. \r\n        // Для этого в ProfileInfoContainer создаём условие для ожидания return if (!this.props.profileInfo) {return <Loading />}\r\n        // этим мы говорим, пока profileInfo не получил данные покажи Loading\r\n        <div>\r\n            <div>\r\n                <div className={ModCSS.userPhoto}>\r\n                    <img src={props.profileInfo.photos.large || userPhoto} />\r\n                    \r\n                    {/* этим мы говорим, если isOwner = true то покажи input */}\r\n                    <div>\r\n                        {props.isOwner && <input type={\"file\"} onChange={photoSelect} />}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* дальше применяем Хуки */}\r\n                {/* <Status status = {props.status} getUpdateStatusInfoThunk={props.getUpdateStatusInfoThunk}/> */}\r\n                <StatusWithHook status={props.status} getUpdateStatusInfoThunk={props.getUpdateStatusInfoThunk} />\r\n                \r\n                { editMode ? <DescriptionFormReduxForm profileInfo={props.profileInfo}\r\n                                                        onSubmit={onSubmitHandl} /> \r\n                            : <Description profileInfo={props.profileInfo} \r\n                                            isOwner={props.isOwner}\r\n                                            editMode={ () => {setEditMode(true)}} /> }\r\n                \r\n                {/* убрали так как добавили статусы из сервера */}\r\n                {/* <div>{props.profileInfo.aboutMe}</div> */}\r\n                \r\n                <MyPostsContainer />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Description = (props) => {\r\n    return <div>\r\n        {props.isOwner && <div> <button onClick={props.editMode}>edit</button> </div>}\r\n        <div>\r\n            <b>Full name</b>: {props.profileInfo.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {props.profileInfo.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {props.profileInfo.lookingForAJob &&\r\n            <div>\r\n                <b>My skylls</b>: {props.profileInfo.lookingForAJobDescription}\r\n            </div>}\r\n        <div>\r\n            <b>About me</b>: {props.profileInfo.aboutMe}\r\n        </div>\r\n        <div >\r\n            <b>Contacts</b>: {Object.keys(props.profileInfo.contacts)\r\n                .map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={props.profileInfo.contacts[key]} />\r\n                })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return <div  className={ModCSS.Contact} >\r\n        <b>{contactTitle}</b>: <b>{contactValue}</b>\r\n    </div>\r\n}\r\n\r\n//доступ только авторизованным\r\nlet authAccessHOC = withAuthRedirect(ProfileInfo);\r\n\r\nexport default authAccessHOC;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./profileInfo\"\r\n// import ModCSS from \"./Profile.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport { connect } from 'react-redux';\r\nimport {getProfileInfoThunk, getStatusInfoThunk, getUpdateStatusInfoThunk, savePhoto} from '../../redux/profile-reducer';\r\nimport { withRouter, Redirect } from \"react-router\";\r\n\r\n\r\n//это контейнерная классовая компонента она обязана всё перенаправить в дочернюю компоненту\r\nclass ProfileInfoContainer extends React.Component {\r\n    \r\n    reloadProfile() {\r\n        // let userId = this.props.authorizeUserId;\r\n            // if (!userId) {\r\n            //     this.props.history.push(\"/ProfileInfoContainer/17232\")\r\n            // }\r\n\r\n            let userId = this.props.match.params.userId; // получаем id пользователя\r\n            if (!userId) {\r\n                userId = 17232;} // -----------------------убирать жёсткую привязку\r\n    \r\n            //перекинули запрос в api.js apiUsersRouter\r\n            // axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId) \r\n            // apiUsersRouter(userId).then(response => {\r\n            //перенесли в profileReducer, сделали через санки\r\n            // apiUsersRouter(userId).then(data => {\r\n            //     // debugger\r\n            //         // this.props.setProfileInfo(response.data); //этим мы говорим, добавь в наш store всё из data\r\n            //         this.props.setProfileInfo(data); //этим мы говорим, добавь в наш store всё из data\r\n            //     });\r\n                        \r\n            //когда компонента функциональная мы пропсы запрашиваем напрямую через props.\r\n            //когда компонента классовая мы пропсы запрашиваем через this.props.\r\n            this.props.getProfileInfoThunk(userId);\r\n            this.props.getStatusInfoThunk(userId); // добавили для отображения статуса\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.reloadProfile();\r\n    }       \r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId) //Тут говорим если пользователи не равны...\r\n        this.reloadProfile();\r\n    }\r\n    \r\n    render () {\r\n        // (!this.props.profileInfo) если у нас нет profileInfo\r\n        //этим условием мы говорим, пока наш profileInfo равен null, верни нас к profile\r\n        if (!this.props.profileInfo) { return <Redirect to = \"/profile\" /> };\r\n        // debugger\r\n        return (\r\n            <div>\r\n                {/* //{...this.props} Пропсы которые пришли в нас, мы их раскрываем {...}, и как атрибуты props= передаём нашеё компоненте */}\r\n                {/* <ProfileInfo {...this.props} props={this.props} /> это показано для примера, что внутри */}\r\n                <ProfileInfo {...this.props} profileInfo={this.props.profileInfo}\r\n                                            status={this.props.status}\r\n                                            getUpdateStatusInfoThunk={this.props.getUpdateStatusInfoThunk}\r\n                                            /* isOwner, делаем кнопку если мы выбираем себя */\r\n                                            isOwner={!this.props.match.params.userId}\r\n                                            savePhoto={this.props.savePhoto} /> \r\n                                            \r\n                \r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n        profileInfo: state.profilePage.profileInfo,\r\n        status: state.profilePage.status, // добавили для отображения статуса\r\n        authorizeUserId: state.auth.userId, // если мы авторизованны показывать наш профиль. В итоге в компоненту приходят эти данные\r\n        isAuth: state.auth.isAuth\r\n});\r\n\r\n//возвращает новую компоненту ProfileInfoContainer и в неё ещё закинет данные из URL\r\nlet WithUrlDataContainerComponent = withRouter(ProfileInfoContainer);\r\n\r\n//рефакторинг\r\n// export default connect(mapStateToProps, {setProfileInfo})(ProfileInfoContainer);\r\nexport default connect(mapStateToProps, \r\n                        {getProfileInfoThunk, \r\n                        getStatusInfoThunk,\r\n                        getUpdateStatusInfoThunk,\r\n                        savePhoto}) // savePhoto попадает сюда из Редьюсера\r\n                        (WithUrlDataContainerComponent);\r\n","import React from \"react\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import { apiAuthProfile, apiLogin, apiLogout } from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\"\r\nimport {authProfileThunk} from \"./auth-reducer\"\r\n\r\nconst SET_INITIALIZED = \"app/SET_INITIALIZED\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n};\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state, // мы делаем копию state\r\n                initialized: true, // и меняем initialized\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSaccess = () => ({type: SET_INITIALIZED})\r\n\r\n// санк криейтор\r\nexport const initializApp = () => (dispatch) => {\r\n    let promise = dispatch(authProfileThunk());\r\n    Promise.all([promise])\r\n    .then (() => {\r\n        dispatch(initializedSaccess());\r\n    })\r\n}\r\n\r\nexport default appReducer;\r\n\r\n","import React from \"react\";\r\nimport Loading from \"../loading\";\r\n\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Loading />} >\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    };\r\n}","import React from \"react\";\r\nimport Navigation from \"./components/Navigation/Navigation\";\r\nimport AuthContainer from \"./components/Authorization/authContainer\";\r\nimport Login from \"./components/Authorization/login\";\r\n// import Profile from \"./components/Profile/Profile\";\r\n//изменили на Container\r\n// import MyPosts from \"./components/MyPosts/MyPosts\";\r\n// import Messages from \"./components/Messages/Messages\";\r\nimport MyPostsContainer from \"./components/MyPosts/MyPostsContainer\";\r\n// import MessagesContainer from \"./components/Messages/MessagesContainer\"; //перенесли ниже для React lazy\r\n// import UserContainer from \"./components/Users/userContainer\"; //перенесли ниже для React lazy\r\nimport ProfileInfoContainer from \"./components/Profile/profileInfoContainer\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport ModCSS from \"./App.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport { BrowserRouter, Route } from \"react-router-dom\"; // импорт с фигурными скобками из-за экспорта не по дефолту\r\nimport { connect } from 'react-redux';\r\n// import { withRouter } from \"react-router\";\r\n// import { compose } from \"redux\";\r\nimport {initializApp} from \"./redux/app-reducer\";\r\nimport Loading from \"../src/loading\";\r\nimport {withSuspense} from \"./hoc/withSuspense\" // нужен для React Lazy\r\n\r\n// переносим массив из MyPosts, и далее в index.js\r\n// let postData = [\r\n//         { id: 1, text: \"text1\", like: \"10\" },\r\n//         { id: 2, text: \"text2\", like: \"20\" },\r\n//         { id: 3, text: \"Bi\", like: \"30\" },\r\n//         { id: 4, text: \"Mi\", like: \"40\" }\r\n//     ];\r\n\r\n//создали основную компоненту (это переменная, которая по факту функция)\r\n// const App = (props) => {\r\n//     // debugger\r\n//     return (\r\n//         // BrowserRouter, вложенность для маршрутизации\r\n//         <BrowserRouter>\r\n//             <div className={ModCSS.appWrapper}>\r\n//                 <div className={ModCSS.nav}>\r\n//                 {/* передаём сюда подкомпоненту. Компонента всегда с большой буквы */}\r\n//                 {/* в Navigation.jsx лежат ссылки для Route */}\r\n//                     <Navigation />\r\n//                 </div>\r\n//                 <div className={ModCSS.content}>\r\n//                     {/* создаём маршрутизатор для управлеения ссылками */}\r\n//                     {/* <Route path=\"/Authorization\" component={Authorization} />\r\n//                     <Route path=\"/Profile\" component={Profile} />\r\n//                     <Route path=\"/MyPosts\" component={MyPosts} />\r\n//                     <Route path=\"/Messages\" component={Messages} />\r\n//                     <Route path=\"/Settings\" component={Settings} /> */}\r\n//                     {/* через render можем вызвать анонимную функцию */}\r\n//                     <Route path=\"/Authorization\" render={ () => <AuthContainer />} />\r\n//                     <Route path=\"/Profile\" render={ () => <ProfileContainer />} />\r\n//                     {/* ? - означает что это параметр (:userId) не обязательный */}\r\n//                     <Route path=\"/ProfileInfoContainer/:userId?\" render={ () => <ProfileInfoContainer />} />\r\n//                     {/* передаём пропсы из массива postData */}\r\n//                     {/* затем берём postData уже из пропса который приходит в app.js из index.js. прописываем props.postData */}\r\n//                     {/* теперь массив с объектами находится в state.js, для этого добавляем appState (props.appState.postData)*/}\r\n//                     {/* <Route path=\"/MyPosts\" render={ () => <MyPosts postData={props.appState.postData}/>} />\r\n//                     <Route path=\"/Messages\" render={ () => <Messages MesDataName={props.appState.MesDataName} MesDataItem={props.appState.MesDataItem}/>} /> */}\r\n//                     {/* сгруппировали state и атрибуты имеют другой вид */}\r\n//                     {/* <Route path=\"/MyPosts\" render={ () => <MyPosts state={props.addState} addPostBLL={props.addPostBLL} />} /> */}\r\n//                     {/* добавили myPostsPage */}\r\n//                     {/* добавили updatePostChange */}\r\n//                     {/* переписываем с учётом dispatch */}\r\n//                     {/* <Route path=\"/MyPosts\" render={ () => <MyPosts state={props.addState} \r\n//                                                             addPostBLL={props.addPostBLL}\r\n//                                                             myPostsPage={props.myPostsPage}\r\n//                                                             updatePostChange={props.updatePostChange} />} /> */}\r\n//                                                             {/* заменяем компоненту */}\r\n//                     {/* <Route path=\"/MyPosts\" render={ () => <MyPosts APPstate={props.addState} \r\n//                                                             dispatch={props.dispatch} />} />\r\n//                                                             {/* updatePostChange тут уже не нужен */}\r\n//                                                             {/* updatePostChange={props.updatePostChange}  */}\r\n//                     {/* <Route path=\"/MyPosts\" render={ () => <MyPostsContainer newState = {props.addState} />} />\r\n//                     <Route path=\"/Messages\" render={ () => <MessagesContainer newState={props.addState} \r\n//                                                             dispatch={props.dispatch} />} /> */}\r\n//                                                             {/* переписываю под react-redux */}\r\n//                     <Route path=\"/MyPosts\" render={ () => <MyPostsContainer newState = {props.store} />} />\r\n//                     <Route path=\"/Messages\" render={ () => <MessagesContainer newState = {props.store}\r\n//                                                             dispatch={props.dispatch} />} />\r\n//                     <Route path=\"/login\" render={ () => <Login />} />\r\n//                     <Route path=\"/Settings\" render={Settings} />\r\n//                 </div>\r\n//             </div>\r\n//         </BrowserRouter>\r\n//     );\r\n// };\r\n\r\n// React lazy. Тут мы говорим, загрузи данную компоненту когда её вызовут\r\nconst MessagesContainer = React.lazy(() => import('./components/Messages/MessagesContainer'));\r\nconst UserContainer = React.lazy(() => import('./components/Users/userContainer'));\r\n\r\n// изменили компоненту на классовую\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        // this.props.authProfileThunk() // перенесли из AuthContainer\r\n        this.props.initializApp()\r\n    }\r\n    \r\n    render () {\r\n        \r\n\r\n        // делаем проверку. тут говорим, пока не получена инициализация покажи загрузчик\r\n        if (!this.props.initialized) {\r\n            return <Loading />\r\n        }\r\n\r\n        return (\r\n                <div className={ModCSS.appWrapper}>\r\n                    <div className={ModCSS.nav}>\r\n                        <Navigation />\r\n                    </div>\r\n                    <div className={ModCSS.content}>\r\n                        <Route path=\"/Authorization\" render={ () => <AuthContainer />} />\r\n                        <Route path=\"/Profile\" render={ () => <MyPostsContainer newState = {this.props.store} />} />\r\n                        {/* убрали, так как применили React.Lazy */}\r\n                        {/* <Route path=\"/Users\" render={ () => <UserContainer />} /> */}\r\n                        <Route path=\"/Users\" render={withSuspense(UserContainer)} />\r\n                        <Route path=\"/ProfileInfoContainer/:userId?\" render={ () => <ProfileInfoContainer />} />\r\n                        {/* убрали, так как применили React.Lazy */}\r\n                        {/* <Route path=\"/Messages\" render={ () => <MessagesContainer newState = {this.props.store}\r\n                                                                                dispatch={this.props.dispatch} />} /> */}\r\n                        <Route path=\"/Messages\" render={withSuspense(MessagesContainer)} />\r\n                        <Route path=\"/login\" render={ () => <Login />} />\r\n                        <Route path=\"/Settings\" render={Settings} />\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized // эту app необходимо брать из комбайна редьюсеров\r\n})\r\n\r\n// экспортируем для index.js\r\n// export default App; // изменили компоненту на классовую\r\n// export default connect(null, {authProfileThunk}) (App); // изменили аосле создания appReducer\r\nexport default connect(mapStateToProps, {initializApp}) (App);\r\n\r\n// не получилось запустить\r\n// export default compose(\r\n//     withRouter, \r\n//     connect(null, {authProfileThunk})) (App);","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport myPostReducer from \"./myPost-reducer\"\r\nimport messagesReducer from \"./messages-reducer\"\r\nimport profileReducer from \"./profile-reducer\"\r\nimport authReducer from \"./auth-reducer\"\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\n\r\n//собираем все рэдюсеры. соответственно это разделы state\r\nlet reducers = combineReducers({\r\n    myPostsPage: myPostReducer, \r\n    messagesPage: messagesReducer,\r\n    profilePage: profileReducer,\r\n    auth: authReducer,\r\n    form: formReducer, // тут form обязательный ключ\r\n    app: appReducer\r\n});\r\n\r\n\r\n//добавили для расширения браузера Redux DevTools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//createStore создаёт внутри себя  state внутр которого есть reducers (создаём store с помощью redux)\r\n//applyMiddleware этим мы говорим, прими промежуточный слой. чтобы запустить санки из санк-киейтора\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware)); //убрали после добавления Redux DevTools\r\n\r\n// Изменили после внедрения Redux DevTools, во избежании конфликтов\r\n// window.store = store;\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react'; //подключаем модуль реакт из папки модулей\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'; // импортируем сюда компоненту\r\nimport reportWebVitals from './reportWebVitals';\r\n//отключаем так как подключили redux\r\n// import store from './redux/store';\r\nimport store from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\n// import {addPostBLL, updatePostChange, subscribe} from './redux/state'; //импортируем не по дефолту, нужны {} // это уже не нужно, та как теперь экспортируем store\r\n// import {reRenderEntireTree} from \"./redux/render\" // render.js уже не нужен\r\nimport { HashRouter } from \"react-router-dom\"; // импорт с фигурными скобками из-за экспорта не по дефолту\r\n\r\n// переносим массив из app.js\r\n// переносим все массивы state.js\r\n// let postData = [\r\n//     { id: 1, text: \"text1\", like: \"10\" },\r\n//     { id: 2, text: \"text2\", like: \"20\" },\r\n//     { id: 3, text: \"Bi\", like: \"30\" },\r\n//     { id: 4, text: \"Mi\", like: \"40\" }\r\n// ];\r\n\r\n// let MesDataName = [\r\n//     {id: 1, name: \"name1\"},\r\n//     {id: 2, name: \"name2\"},\r\n//     {id: 3, name: \"name3\"},\r\n//     {id: 4, name: \"name4\"}\r\n// ];\r\n\r\n// let MesDataItem = [\r\n//     {id: 1, item: \"item1\"},\r\n//     {id: 2, item: \"item2\"},\r\n//     {id: 3, item: \"item3\"},\r\n//     {id: 4, item: \"item4\"},\r\n// ];\r\n\r\n// перенесли функцию reRenderEntireTree в render.js\r\n// let reRenderEntireTree = (state) => {\r\n//     // передаём основную компоненту App тегу body\r\n//     ReactDOM.render(<React.StrictMode>\r\n//         <App addState={state} addPostBLL={addPostBLL} />\r\n//         {/* так было до state.js */}\r\n//         {/* <App postData={postData} MesDataName={MesDataName} MesDataItem={MesDataItem}/> */}\r\n//     </React.StrictMode>,\r\n//         document.getElementById('root')\r\n//     );\r\n// }\r\n// вернули обратно для рефакторинга\r\n// let reRenderEntireTree = (state) => {\r\n//     // передаём основную компоненту App тегу body\r\n//     ReactDOM.render(<React.StrictMode>\r\n//         <App addState={state} \r\n//             addPostBLL={addPostBLL} \r\n//             newPostData={state} \r\n//             updatePostChange={updatePostChange}/>\r\n//         {/* так было до state.js */}\r\n//         {/* <App postData={postData} MesDataName={MesDataName} MesDataItem={MesDataItem}/> */}\r\n//     </React.StrictMode>,\r\n//         document.getElementById('root')\r\n//     );\r\n// }\r\n\r\n// переписываем с учётом dispatch\r\n// let reRenderEntireTree = (state) => {\r\n//     // новый вид после появления store\r\n//     ReactDOM.render(<React.StrictMode>\r\n//         {/* bind тут нужен чтобы this методa addPostBLL вызывался не от addPostBLL, а от объекта store */}\r\n//         <App addState={state} \r\n//             addPostBLL={store.addPostBLL.bind(store)} \r\n//             newPostData={state} \r\n//             updatePostChange={store.updatePostChange.bind(store)}/>\r\n//         {/* так было до state.js */}\r\n//         {/* <App postData={postData} MesDataName={MesDataName} MesDataItem={MesDataItem}/> */}\r\n//     </React.StrictMode>,\r\n//         document.getElementById('root')\r\n//     );\r\n// }\r\n\r\n// let reRenderEntireTree = () => {\r\n//     // debugger\r\n//     // новый вид после появления store\r\n//     ReactDOM.render(<React.StrictMode>\r\n//         {/* bind тут нужен чтобы this методa addPostBLL вызывался не от addPostBLL, а от объекта store */}\r\n//         <App addState={store} \r\n//             dispatch={store.dispatch.bind(store)} />\r\n//             {/* updatePostChange тут уже не нужен */}\r\n//             {/* updatePostChange={store.updatePostChange.bind(store)} */}\r\n//         {/* так было до state.js */}\r\n//         {/* <App postData={postData} MesDataName={MesDataName} MesDataItem={MesDataItem}/> */}\r\n//     </React.StrictMode>,\r\n//         document.getElementById('root')\r\n//     );\r\n// }\r\n\r\n//перепичываем через Provider (context API)\r\n// let reRenderEntireTree = () => {\r\n//     // debugger\r\n//     // новый вид после появления store\r\n//     ReactDOM.render(<React.StrictMode>\r\n//         {/* bind тут нужен чтобы this методa addPostBLL вызывался не от addPostBLL, а от объекта store */}\r\n//         <Provider store={store}>\r\n//             <App />\r\n//         </Provider>\r\n//             {/* updatePostChange тут уже не нужен */}\r\n//             {/* updatePostChange={store.updatePostChange.bind(store)} */}\r\n//         {/* так было до state.js */}\r\n//         {/* <App postData={postData} MesDataName={MesDataName} MesDataItem={MesDataItem}/> */}\r\n//     </React.StrictMode>,\r\n//         document.getElementById('root')\r\n//     );\r\n// }//убрали функцию reRenderEntireTree, так как добавили react-redux\r\n\r\n// reRenderEntireTree(store._state); было так\r\n// reRenderEntireTree(store.getState());//убрали, так как добавили react-redux\r\n\r\n// тут reRenderEntireTree не означает что мы его запускем. запускается он как переданный аргумент для subscribe после вызова\r\n// store.subscribe(reRenderEntireTree); \r\n\r\n// //так как redux не уведомляет об изменённом state, запрашиваем принудительно изменённый state\r\n// store.subscribe(() => {\r\n//     let state = store.getState()\r\n//     reRenderEntireTree(state);\r\n// });//убрали, так как добавили react-redux\r\n\r\nReactDOM.render(<React.StrictMode>\r\n                    <HashRouter>\r\n                        <Provider store={store}>\r\n                            <App />\r\n                        </Provider>\r\n                    </HashRouter>\r\n                </React.StrictMode>,\r\n                    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n","import { apiStatusInfo, apiUpdateStatusInfo, apiGetUsers, apiFollowUser, apiUnfollowUser, apiUsersRouter, apiSavePhoto } from \"../api/api\"\r\n\r\n///3\r\nconst FOLLOW = \"profile/FOLLOW\";\r\nconst UNFOLLOW = \"profile/UNFOLLOW\";\r\nconst SET_USERS = \"profile/SET_USERS\";\r\nconst SET_CARRENT_PAGE = \"profile/SET_CARRENT_PAGE\";//7. создаём константу для работы с сервером. Далее берём её и обрабатываем в state (const profileReducer)\r\nconst SET_USER_COUNT = \"profile/SET_USER_COUNT\";//15. \r\nconst TOGGLE_IS_LOADING = \"profile/TOGGLE_IS_LOADING\";\r\nconst SET_PROFILE_INFO = \"profile/SET_PROFILE_INFO\";\r\nconst TOGGLE_IS_FOLLOWING = \"profile/TOGGLE_IS_FOLLOWING\";\r\nconst SET_STATUS = \"profile/SET_STATUS\";\r\nconst SAVE_PHOTO = \"profile/SAVE_PHOTO\";\r\n\r\n///1\r\n// let initialState = {\r\n//     users: [    //         {\r\n//     //     //             id: 1, photoUrl: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\",\r\n//     //     //             followed: true, fullName: \"Ivan\", status: \"I am in network Russia\", location: { country: \"Russia\", city: \"Moscow\" }\r\n//     //     //         },\r\n//     //     //         {\r\n//     //     //             id: 2, photoUrl: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\",\r\n//     //     //             followed: false, fullName: \"Roma\", status: \"I am in network Europe\", location: { country: \"Europe\", city: \"Italy\" }\r\n//     //     //         },\r\n//     //     //         {\r\n//     //     //             id: 3, photoUrl: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\",\r\n//     //     //             followed: false, fullName: \"Dima\", status: \"I am in network Asia\", location: { country: \"Asia\", city: \"Japan\" }\r\n//     //     //         },\r\n//     //     //         {\r\n//     //     //             id: 4, photoUrl: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\",\r\n//     //     //             followed: false, fullName: \"Rita\", status: \"I am in network USA\", location: { country: \"USA\", city: \"Chicago\" }\r\n//     //     //         },\r\n//     ],\r\n// };\r\n\r\n//создаём для store\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10, //1 \r\n    totalUsersCount: 0,//общее количество пользобателей\r\n    carrentPage: 1,\r\n    isLoading: false, //ожидание прогрузки данных с сервера\r\n    profileInfo: null,\r\n    followingInProcess: [], //это для того чтобы небыло много запросов на сервер по нажатию на кнопку. Т.е. пока не прийдут изменения делаем кнопку неактивной\r\n    status: \"\"\r\n};\r\n\r\n// рефакторим для сокращения кода\r\nconst updatefollowUnfollow = (items, itemId, propName, newProps) => {\r\n    return items.map(u => {\r\n        if (u[propName] === itemId) {\r\n            return {...u, ...newProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n\r\n///4\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                //копируем users из state\r\n\r\n                // ниже рефакторим\r\n                // users: state.users.map(u => {\r\n                //     //когда, пришёл очередной users пришёл в колбэк u благодаря .map, \r\n                //     //и если его id равен айдишнику который нужно зафоловить,\r\n                //     //то тогда его нужно зафоловить сделать true, а для этого\r\n                //     //нужно вернуть изменённую копию\r\n                //     if (u.id === action.userId) {\r\n                //         return { ...u, followed: true }\r\n                //     }\r\n                //     //если не совпадает, возвращаем тот же самый объект\r\n                //     return u;\r\n                // })\r\n\r\n                users: updatefollowUnfollow(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                //копируем users из state\r\n                // users: state.users.map(u => {\r\n                //     //когда, пришёл очередной users пришёл в колбэк u благодаря .map, \r\n                //     //и если его id равен айдишнику который нужно зафоловить,\r\n                //     //то тогда его нужно зафоловить сделать true, а для этого\r\n                //     //нужно вернуть изменённую копию\r\n                //     if (u.id === action.userId) {\r\n                //         return { ...u, followed: false }\r\n                //     }\r\n                //     //если не совпадает, возвращаем тот же самый объект\r\n                //     return u;\r\n                // })\r\n\r\n                users: updatefollowUnfollow(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case SET_USERS: {\r\n            return { ...state, users: [...action.users] } //взять старый state, взять пользователей которые там были и перезатиреть теми пользователями которые пришли из экшна\r\n        }\r\n        case SET_CARRENT_PAGE: {\r\n            return { ...state, carrentPage: action.carrentPage } //8. взять старый carrentPage, и меняем на тот carrentPage который сидит в action. затем его нужно задиспатчить\r\n        }\r\n        case SET_USER_COUNT: {\r\n            return { ...state, totalUsersCount: action.count } //16. \r\n        }\r\n        case TOGGLE_IS_LOADING: {\r\n            return { ...state, isLoading: action.isLoading }\r\n        }\r\n        case SET_PROFILE_INFO: {\r\n            return { ...state, profileInfo: action.profileInfo }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING: {\r\n            return {\r\n                ...state,\r\n                followingInProcess: action.isLoading\r\n                    ? [...state.followingInProcess, action.userId] //деструктуризируем массив который был и в конец дописываем id которая приходит к нам в action\r\n                    : state.followingInProcess.filter(id => id != action.userId)\r\n            } //state.followingInProcess.filter() делаем копию и убираем id пользователя(пропускаем только ту id которая не равна той id которая пришла в action) \r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SAVE_PHOTO: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ///2\r\n// export const followAC = (userId) => ({type: FOLLOW, userId})\r\n// export const unFollowAC = (userId) => ({type: UNFOLLOW, userId})\r\n// export const setUsersAC = (users) => ({type: SET_USERS, users})\r\n// export const setCarrentPageAC = (carrentPage) => ({type: SET_CARRENT_PAGE, carrentPage}) //11. возвращаем action setCarrentPage\r\n// export const setTotalUsersCountAC = (totalUsersCount) => ({type: SET_USER_COUNT, count: totalUsersCount}) //17. расписали count чтобы понять что от куда берётся\r\n// export const toggleIsLoadingAC = (isLoading) => ({type: TOGGLE_IS_LOADING, isLoading})\r\n\r\n//Убираем окончание АС чтобы исправить под новый синтаксис\r\n//переписали follow unFollow после использования санок\r\n// export const follow = (userId) => ({ type: FOLLOW, userId })\r\n// export const unFollow = (userId) => ({ type: UNFOLLOW, userId })\r\nexport const followSaccess = (userId) => ({ type: FOLLOW, userId })\r\nexport const unFollowSaccess = (userId) => ({ type: UNFOLLOW, userId })\r\nexport const setUsers = (users) => ({ type: SET_USERS, users })\r\nexport const setCarrentPage = (carrentPage) => ({ type: SET_CARRENT_PAGE, carrentPage }) //11. возвращаем action setCarrentPage\r\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_USER_COUNT, count: totalUsersCount }) //17. расписали count чтобы понять что от куда берётся\r\nexport const toggleIsLoading = (isLoading) => ({ type: TOGGLE_IS_LOADING, isLoading })\r\nconst setProfileInfo = (profileInfo) => ({ type: SET_PROFILE_INFO, profileInfo })\r\nexport const toggleFollowingInProcess = (isLoading, userId) => ({ type: TOGGLE_IS_FOLLOWING, isLoading, userId })\r\nconst setStatus = (status) => ({ type: SET_STATUS, status })\r\nexport const savePhotoSaccess = (photos) => ({ type: SAVE_PHOTO, photos })\r\n\r\n\r\n//создаём санку. а далее санк-криейтор\r\n//создаём санк-криейтор. это функция, котороя может что то принимать и возвращать санку\r\n// ниже сделали рефакторинг через async await. измегить везде где есть then\r\n// export const getUsersThunkCreator = (carrentPage, pageSize) => {\r\n//     return (dispatch) => {\r\n//         dispatch(toggleIsLoading(true));\r\n//         apiGetUsers(carrentPage, pageSize).then(data => {\r\n//             dispatch(toggleIsLoading(false));\r\n//             // this.props.setUsers(response.data.items); //этим мы говорим, добавь в наш store юзеров из items\r\n//             dispatch(setUsers(data.items)); //этим мы говорим, добавь в наш store юзеров из items\r\n//             dispatch(setTotalUsersCount(data.totalCount))\r\n//         });\r\n//     }\r\n// }\r\n\r\nexport const getUsersThunkCreator = (carrentPage, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsLoading(true));\r\n        // нечватает строчки\r\n        // dispatch(setCurrentPage(carrentPage))\r\n\r\n        let data = await apiGetUsers(carrentPage, pageSize)\r\n        dispatch(toggleIsLoading(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\n// ниже делаем рефакторинг\r\n// export const followThunk = (userId) => {\r\n//     return async (dispatch) => {\r\n//         dispatch(toggleFollowingInProcess(true, userId));\r\n//         let data = await apiFollowUser(userId)\r\n//         if (data.resultCode == 0) {\r\n//             dispatch(followSaccess(userId));\r\n//         }\r\n//         dispatch(toggleFollowingInProcess(false, userId));\r\n//     }\r\n// }\r\n\r\n// export const unFollowThunk = (userId) => {\r\n//     return async (dispatch) => {\r\n//         dispatch(toggleFollowingInProcess(true, userId));\r\n//         let data = await apiUnfollowUser(userId)\r\n//         if (data.resultCode == 0) {\r\n//             dispatch(unFollowSaccess(userId));\r\n//         }\r\n//         dispatch(toggleFollowingInProcess(false, userId));\r\n//     }\r\n// }\r\n\r\nconst followUnfollow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingInProcess(true, userId));\r\n\r\n    let data = await apiMethod(userId);\r\n\r\n    if (data.resultCode == 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingInProcess(false, userId));\r\n}\r\n\r\nexport const followThunk = (userId) => {\r\n    return async (dispatch) => {\r\n        // закинули логику в переменную apiMethod и actionCreator. каждый берёт значения которые ему нужны\r\n        let apiMethod = apiFollowUser.bind(apiFollowUser);\r\n        let actionCreator = followSaccess;\r\n\r\n        // этот кусок кода одинаковый для каждой санки\r\n        followUnfollow(dispatch, userId, apiMethod, actionCreator);\r\n    }\r\n}\r\n\r\nexport const unFollowThunk = (userId) => {\r\n    return async (dispatch) => {\r\n        // // закинули логику в переменную apiMethod и actionCreator. каждый берёт значения которые ему нужны\r\n        // let apiMethod = apiUnfollowUser.bind(apiUnfollowUser);\r\n        // let actionCreator = unFollowSaccess;\r\n        // // этот кусок кода одинаковый для каждой санки\r\n        // followUnfollow(dispatch, userId, apiMethod, actionCreator);\r\n\r\n        // сокращаем до одной строчки\r\n        followUnfollow(dispatch, userId, apiUnfollowUser.bind(apiUnfollowUser), unFollowSaccess);\r\n    }\r\n}\r\n\r\n//так пишется санка в стрелочной функции\r\nexport const getProfileInfoThunk = (userId) => async (dispatch) => {\r\n\r\n    let data = await apiUsersRouter(userId)\r\n\r\n    // this.props.setProfileInfo(response.data); //этим мы говорим, добавь в наш store всё из data\r\n    dispatch(setProfileInfo(data)); //этим мы говорим, добавь в наш store всё из data\r\n\r\n}\r\n\r\nexport const getStatusInfoThunk = (userId) => async (dispatch) => {\r\n\r\n    let data = await apiStatusInfo(userId)\r\n\r\n    dispatch(setStatus(data));\r\n}\r\n\r\nexport const getUpdateStatusInfoThunk = (status) => async (dispatch) => {\r\n\r\n    let data = await apiUpdateStatusInfo(status)\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file) => async (dispatch) => {\r\n\r\n    let data = await apiSavePhoto(file)\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(savePhotoSaccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n","//проверка поля формы на валидность\r\nexport const requiredField = value => {\r\n    if (value) return undefined; // если value есть, то возвращаем undefined\r\n    // а иначе \"field is requred\"\r\n    return \"field is requred\"\r\n}\r\n\r\n// санк кнрейтор для количества символов (тут принцип замыкания)\r\n// maxLength приходит из параметров функции maxLengthCreator, а value из поля формы\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `max length is ${maxLength} symbols`; \r\n    return undefined;\r\n}\r\n\r\n","import React from \"react\";\r\nimport ModCSS from \"./formStyle.module.css\"; //Модифицируем наши стили с помощью .module\r\n\r\n// рефакторим для того что бы получилось сделать форму логина\r\n// // создаем кастомную компоненту textarea для отображения пользователю информации об валидности полей\r\n// export const Textarea = ({input, meta, ...props}) => { //Применяем REST оператор. этим мы говорим. \r\n//     //что хотим достать деструктуризацией input и meta, \r\n//     //а в ...props будет всё остальное кроме input и meta\r\n    \r\n// const showError = meta.touched && meta.error; // meta.touched и meta.error стандартно из формы\r\n\r\n//     return (\r\n//         // свойство error сидит в meta\r\n//         // (showError ? ModCSS.error : \" \") Тут говорим. если ошибка есть покажи showError и отобрази ModCSS.error, а иначе \" \"\r\n//         <div className={ModCSS.form + \" \" + (showError ? ModCSS.error : \" \")}>\r\n//             {/* деструктуризацируем input и props */} \r\n//             <textarea {...input} {...props} /> \r\n//             <div>\r\n//                 {/* если поле Textarea было тронуто и не выполнено условие, тогда показываем span */}\r\n//             { showError && <span>{ meta.error }</span> }\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport const FormControl = ({input, meta, child, ...props}) => { // добавили child\r\n\r\nconst showError = meta.touched && meta.error;\r\n\r\n    return ( // изменили textarea на { props.children } \r\n        <div className={ModCSS.form + \" \" + (showError ? ModCSS.error : \" \")}>\r\n             { props.children } \r\n            <div>\r\n               { showError && <span>{ meta.error }</span> }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props; //...restProps остаточные пропсы\r\n    return <FormControl {...props} > <textarea {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props} > <input {...input} {...restProps} /> </FormControl>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"formStyle_form__1PX4e\",\"error\":\"formStyle_error__2vPOB\",\"loginFormError\":\"formStyle_loginFormError__1_f_C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__2r3MX\"};","import React from 'react';\r\nimport { Redirect } from \"react-router\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth, // проверка авторизации. isAuth прийдёт в пропсах (в Messages.jsx) и мы сможем его прочитать\r\n});\r\n\r\n//реализация НОС компоненты. Когда вызывается withAuthRedirect, вызывается две компоненты\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            //перенаправление на страницу логина если не авторизован\r\n            if (!this.props.isAuth) {return <Redirect to={\"/login\"} />};\r\n            return <Component {...this.props} /> // все пропсы которые приходят в withAuthRedirect, передаются в {...props}\r\n        }\r\n    }\r\n    \r\n    let ConnectedAuthAccessHOC = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthAccessHOC;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__14D5D\",\"subscribeWrapper\":\"Profile_subscribeWrapper__1_Ct0\",\"subscribeImg\":\"Profile_subscribeImg__-e09O\",\"content\":\"Profile_content__2Rypp\",\"Selected\":\"Profile_Selected__kJA-S\",\"listNamberSelected\":\"Profile_listNamberSelected__NIPAn\",\"status\":\"Profile_status__1gaEf\",\"paginator\":\"Profile_paginator__1Xl6S\",\"pageNumber\":\"Profile_pageNumber__2IUNh\",\"selectedPage\":\"Profile_selectedPage__J-H3D\",\"userPhoto\":\"Profile_userPhoto__1zXAx\",\"Contact\":\"Profile_Contact__3mXd5\"};","export default __webpack_public_path__ + \"static/media/isLoading.73cfc5f4.gif\";","import React from 'react';\r\nimport loading from \"./isLoading.gif\"\r\n\r\nlet Loading = () => {\r\n    return <div>\r\n        <img src={loading} />\r\n    </div>\r\n}\r\n\r\nexport default Loading\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__3aRJh\",\"nav\":\"App_nav__bdmEA\",\"content\":\"App_content__ogXEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Authorization_item__3dXWj\",\"active\":\"Authorization_active__1bQlJ\"};"],"sourceRoot":""}