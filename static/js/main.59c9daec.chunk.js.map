{"version":3,"sources":["redux/messages-reducer.js","components/Profile/Profile.module.css","api/api.js","components/Navigation/Navigation.module.css","logo.png","components/Navigation/Navigation.jsx","redux/auth-reducer.js","form/loginForm.jsx","components/Authorization/login.jsx","components/Authorization/auth.jsx","components/Authorization/authContainer.jsx","redux/myPost-reducer.js","components/MyPosts/Post/Post.jsx","form/postForm.jsx","components/MyPosts/MyPosts.jsx","components/MyPosts/MyPostsContainer.jsx","components/Profile/statusWithHook.jsx","components/Profile/profileInfo.jsx","components/Profile/profileInfoContainer.jsx","components/Settings/Settings.jsx","redux/app-reducer.js","hoc/withSuspense.js","App.js","reportWebVitals.js","redux/redux-store.js","index.js","form/validators.js","redux/profile-reducer.js","form/formsControls.js","form/formStyle.module.css","components/MyPosts/MyPosts.module.css","hoc/authRedirect.js","isLoading.gif","loading.jsx","App.module.css","components/Authorization/Authorization.module.css"],"names":["ADD_MESSAGE_BUTTON_BLL","initialState","MesDataName","id","name","MesDataItem","item","addMessageButtonUIAC","newTextMessage","type","messagesReducer","state","action","newMessage","module","exports","instance","axios","withCredentials","baseURL","headers","apiGetUsers","carrentPage","pageSize","get","then","response","data","apiUsersRouter","userId","apiAuthProfile","apiFollowUser","post","apiUnfollowUser","delete","apiStatusInfo","apiUpdateStatusInfo","status","put","apiLogin","email","password","rememberMe","apiLogout","Navigation","className","ModCSS","main","logo","src","Logo","alt","to","activeClassName","activeLink","SET_AUTH_USER_DATA","login","isAuth","setAuthUserData","authProfileThunk","dispatch","a","resultCode","authReducer","maxLength20","maxLengthCreator","ReduxLoginForm","reduxForm","form","handleSubmit","error","onSubmit","Field","placeholder","component","Input","validate","requiredField","loginFormError","connect","auth","LoginThunkCreator","errorMessage","messages","length","stopSubmit","_error","props","formData","Auth","onClick","LogoutThunkCreator","AuthContainer","active","this","React","Component","ADD_POST_BLL","postData","text","like","myPostReducer","newPost","newTextPost","Post","maxLength10","ReduxPostForm","Textarea","authAccessHOC","withAuthRedirect","postDataEl","map","header","values","addPostBLL","MyPostsContainer","myPostsPage","newPostData","addPostUIActionCreator","MyPosts","StatusWithHook","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","getUpdateStatusInfoThunk","onChange","e","currentTarget","value","profileInfo","photos","large","fullName","ProfileInfoContainer","match","params","getProfileInfoThunk","getStatusInfoThunk","WithUrlDataContainerComponent","withRouter","profilePage","authorizeUserId","Settings","SET_INITIALIZED","initialized","appReducer","withSuspense","Suspense","fallback","MessagesContainer","lazy","UserContainer","App","initializApp","appWrapper","nav","content","path","render","newState","store","app","promise","Promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","messagesPage","profileReducer","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","StrictMode","document","getElementById","maxLength","FOLLOW","UNFOLLOW","SET_USERS","SET_CARRENT_PAGE","SET_USER_COUNT","TOGGLE_IS_LOADING","SET_PROFILE_INFO","TOGGLE_IS_FOLLOWING","SET_STATUS","users","totalUsersCount","isLoading","followingInProcess","updatefollowUnfollow","items","itemId","propName","newProps","u","followSaccess","unFollowSaccess","setCarrentPage","toggleIsLoading","toggleFollowingInProcess","getUsersThunkCreator","totalCount","count","followUnfollow","apiMethod","actionCreator","followThunk","bind","unFollowThunk","followed","filter","FormControl","input","meta","child","showError","touched","children","restProps","mapStateToPropsForRedirect","RedirectComponent","Loading","loading"],"mappings":"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","file":"static/js/main.59c9daec.chunk.js","sourcesContent":["//добавляем так же как в state.js\r\nconst ADD_MESSAGE_BUTTON_BLL = \"mess/ADD_MESSAGE_BUTTON_BLL\";\r\n// убрали после того как добавили форму\r\n// const UPDATE_TEXT_MESSAGE_CHANGE = \"UPDATE_TEXT_MESSAGE_CHANGE\";\r\n\r\nlet initialState = {\r\n    MesDataName: [\r\n        {id: 1, name: \"name1\"},\r\n        {id: 2, name: \"name2\"},\r\n        {id: 3, name: \"name3\"},\r\n        {id: 4, name: \"name4\"}\r\n    ],\r\n    MesDataItem: [\r\n        {id: 1, item: \"item1\"},\r\n        {id: 2, item: \"item2\"},\r\n        {id: 3, item: \"item3\"},\r\n        {id: 4, item: \"item4\"}\r\n    ],\r\n        // создали newPostData для принятия новых значений поля textarea\r\n    // newMessageData: \"hard code message\", // убрали после того как добавили форму\r\n};\r\n\r\nexport const messagesReducer = (state = initialState, action) => {\r\n    // if (action.type === ADD_MESSAGE_BUTTON_BLL) {\r\n    //     {\r\n    //         let newMessage = {\r\n    //             id: 5,\r\n    //             item: state.newMessageData\r\n    //         }\r\n    //         state.MesDataItem.push(newMessage);\r\n    //         if (state.newMessageData === \"\") {state.MesDataItem.pop(newMessage) };\r\n    //         state.newMessageData = \"\";\r\n    //         // this._callSubscriber(this._state);\r\n    //     }\r\n    // } else if (action.type === UPDATE_TEXT_MESSAGE_CHANGE) {\r\n    //     state.newMessageData = action.newMessage;\r\n    //     // this._callSubscriber(this._state);\r\n    // }\r\n    //когда у нас дискретный(не бесконечный) набор чисел, можно применять switch\r\n    // switch (action.type) {\r\n    //     case ADD_MESSAGE_BUTTON_BLL:{\r\n    //         let newMessage = {\r\n    //             id: 5,\r\n    //             item: state.newMessageData\r\n    //         };\r\n    //         let stateCopy = {\r\n    //             ...state,\r\n    //             MesDataItem: [...state.MesDataItem]\r\n    //         };\r\n    //         stateCopy.MesDataItem.push(newMessage);\r\n    //         if (stateCopy.newMessageData === \"\") { stateCopy.MesDataItem.pop(newMessage) };\r\n    //         stateCopy.newMessageData = \"\";\r\n    //         //возвращаем изменения\r\n    //         return stateCopy;\r\n    //     }\r\n    //     case UPDATE_TEXT_MESSAGE_CHANGE:{\r\n    //         let stateCopy = {...state};\r\n    //         stateCopy.newMessageData = action.newMessage;\r\n    //         //возвращаем изменения\r\n    //         return stateCopy;\r\n    //     }\r\n    //     //если ничего не изменилось то возвращаем старый state\r\n    //     default:\r\n    //         return state;\r\n    // }\r\n    //переносим return в каждый case\r\n    // return state;\r\n\r\n    //переписываем оптимизируя\r\n    switch (action.type) {\r\n        // убрали после того как добавили форму\r\n        // case UPDATE_TEXT_MESSAGE_CHANGE:\r\n        //         return {\r\n        //             ...state,\r\n        //             newMessageData: action.newMessageText, //модифицируем копию\r\n        //         };\r\n        case ADD_MESSAGE_BUTTON_BLL:\r\n            // заменили после того как добавили форму\r\n            // let newMessage = state.newMessageData; //достаём текст\r\n            let newMessage = action.newTextMessage; //достаём текст\r\n            return {\r\n                ...state,\r\n                // убрали после того как добавили форму\r\n                // newMessageData: \"\", //затираем\r\n                MesDataItem: [...state.MesDataItem, {id: 5, item: newMessage}] //такой синтаксис push ...., {id:5, item: newMessage} \r\n            };\r\n        //если ничего не изменилось то возвращаем старый state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// заменили после того как добавили форму\r\n// export const addMessageButtonUIAC = () => ({type: ADD_MESSAGE_BUTTON_BLL})\r\nexport const addMessageButtonUIAC = (newTextMessage) => ({type: ADD_MESSAGE_BUTTON_BLL, newTextMessage})\r\n// убрали после того как добавили форму\r\n// export const textChangeAC = (text) => ({type: UPDATE_TEXT_MESSAGE_CHANGE, newMessageText: text})\r\n\r\nexport default messagesReducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__14D5D\",\"subscribeWrapper\":\"Profile_subscribeWrapper__1_Ct0\",\"subscribeImg\":\"Profile_subscribeImg__-e09O\",\"content\":\"Profile_content__2Rypp\",\"Selected\":\"Profile_Selected__kJA-S\",\"listNamberSelected\":\"Profile_listNamberSelected__NIPAn\",\"status\":\"Profile_status__1gaEf\",\"paginator\":\"Profile_paginator__1Xl6S\",\"pageNumber\":\"Profile_pageNumber__2IUNh\",\"selectedPage\":\"Profile_selectedPage__J-H3D\"};","import * as axios from 'axios'; //* импортируем всё что есть в библиотеке axios\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"b945a48b-e23b-46ca-a66f-5493b89d60ce\"\r\n    }\r\n});//Инстансы (ООП), настраиваем его что бы он работал взамен axios\r\n\r\nexport const apiGetUsers = (carrentPage, pageSize) => {\r\n    // return axios.get(baseUrl + `users?page=${carrentPage}&count=${pageSize}`,\r\n    return instance.get(`users?page=${carrentPage}&count=${pageSize}`) //baseURL подставляется автомотически перед users?\r\n        .then(response => response.data); // это ПРОМИС! Тут мы говорим, \r\n        //возвращяй нам не тот промис который мы получаем методом get\r\n        //мы из полученного response берём data, и возращяем data\r\n        //в итоге мы ретурним не то что вернул нам get, а то что вернул нам then\r\n        //а then нам вернул другой промис\r\n        //буквально мы написали return response.data\r\n    }\r\n\r\n//просмотр профиля пользователя\r\nexport const apiUsersRouter = (userId) => {\r\n    // return axios.get(baseUrl + `profile/` + userId) \r\n    return instance.get(`profile/` + userId) //baseURL подставляется автомотически перед profile/\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiAuthProfile = () => {\r\n    // return axios.get(baseUrl + `auth/me`, \r\n    return instance.get(`auth/me`) //baseURL подставляется автомотически перед auth/me\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiFollowUser = (userId) => {\r\n    return instance.post(`follow/${userId}`, {}) //instance подставляется автомотически и headers тоже\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiUnfollowUser = (userId) => {\r\n    return instance.delete(`follow/${userId}`) //instance подставляется автомотически и headers тоже\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiStatusInfo = (userId) => {\r\n    return instance.get(`profile/status/` + userId)\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiUpdateStatusInfo = (status) => {\r\n    return instance.put(`profile/status/`, {status: status}) // put означает обновление. {status: status} смотрим в АПИшке какие данные нужно изменять\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiLogin = (email, password, rememberMe = false ) => {\r\n    return instance.post(`auth/login/`, {email, password, rememberMe})\r\n    .then(response => response.data);\r\n}\r\n\r\nexport const apiLogout = () => {\r\n    return instance.delete(`auth/login/`)\r\n    .then(response => response.data);\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Navigation_main__fLMFe\",\"item\":\"Navigation_item__3P5ze\",\"activeLink\":\"Navigation_activeLink__2EDob\"};","export default __webpack_public_path__ + \"static/media/logo.38dd95ae.png\";","import React from 'react';\r\nimport ModCSS from \"./Navigation.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport Logo from \"./../../logo.png\";\r\nimport { NavLink } from \"react-router-dom\"; // импорт с фигурными скобками из-за экспорта не по дефолту\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <div className={ModCSS.main}>\r\n            <div className={ModCSS.logo}>\r\n                <img src={Logo} alt=\"Logo\" />\r\n                <h1> Сообщество умных людей</h1>\r\n            </div>\r\n            <div>\r\n                {/* для Route тут должны быть ссылки*/}\r\n                <div className={ModCSS.item}>\r\n                    {/* принудительно создали класс activeClassName(activeLink)*/}\r\n                    {/* создали NavLink для обработки ссылок без перезагрузки всей страницы  */}\r\n                    <NavLink to=\"/Authorization\" activeClassName={ModCSS.activeLink}>Authorization</NavLink>\r\n                </div>\r\n                <div className={ModCSS.item}>\r\n                    <NavLink to=\"/ProfileInfoContainer\" activeClassName={ModCSS.activeLink}>Profile</NavLink>\r\n                </div>\r\n                <div className={ModCSS.item}>\r\n                    <NavLink to=\"/Users\" activeClassName={ModCSS.activeLink}>Users</NavLink>\r\n                </div>\r\n                <div className={ModCSS.item}>\r\n                    <NavLink to=\"/Messages\" activeClassName={ModCSS.activeLink}>Messages</NavLink>\r\n                </div>\r\n                \r\n                <div className={ModCSS.item}>\r\n                    <NavLink to=\"/Settings\" activeClassName={ModCSS.activeLink}>Settings</NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import { apiAuthProfile, apiLogin, apiLogout } from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\"\r\n\r\nconst SET_AUTH_USER_DATA = \"auth/SET_AUTH_USER_DATA\";\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false, //состояние пока не авторизован\r\n};\r\n\r\n// добавили isAuth для логинизации\r\n// export const setAuthUserData = (userId, login, email) => ({ type: SET_AUTH_USER_DATA, data: { userId, login, email } })\r\nexport const setAuthUserData = (userId, login, email, isAuth) => ({ type: SET_AUTH_USER_DATA, data: { userId, login, email, isAuth } })\r\n\r\n// ниже сделали рефакторинг через async await. измегить везде где есть then\r\n// export const authProfileThunk = () => {\r\n//     return (dispatch) => {\r\n//         // apiAuthProfile().then(data => { изменили, так как диспатчим этот промисв app\r\n//             return apiAuthProfile().then(data => {\r\n//             //resultCode проверка полученных данных(проверка залогининости)\r\n//             if (data.resultCode === 0) {\r\n//                 // let {id, login, email} = response.data.data; //две data потому-что 1я data сидит в инструкции API, 2ю выдаёт response\r\n//                 let { id, login, email } = data.data; //две data потому-что 1я data сидит в инструкции API, 2ю выдаёт response\r\n//                 // dispatch(setAuthUserData(id, login, email));\r\n//                 dispatch(setAuthUserData(id, login, email, true)); // добавили true для логинизации\r\n//             }\r\n\r\n//         });\r\n//     }\r\n// }\r\n\r\nexport const authProfileThunk = () => async (dispatch) => {\r\n\r\n    let data = await apiAuthProfile();\r\n\r\n    if (data.resultCode === 0) {\r\n        let { id, login, email } = data.data; \r\n        dispatch(setAuthUserData(id, login, email, true)); \r\n    }\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n            // debugger\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                // isAuth: true // убрали после реализации логинизации\r\n\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// всё что после dispatch это САНКА\r\nexport const LoginThunkCreator = (email, password, rememberMe) => async (dispatch) => {\r\n    let data = await apiLogin(email, password, rememberMe)\r\n\r\n    if (data.resultCode === 0) {\r\n                dispatch(authProfileThunk());\r\n            }\r\n            // проверка авторизвции\r\n            else {\r\n                // берём ошибку из ответа сервера. Если messages > 0 то мы выведем первое сообщение messages[0]. Иаче покажем Some error\r\n                let errorMessage = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n                dispatch(stopSubmit (\"login\", {_error: errorMessage}));\r\n            }\r\n}\r\n\r\nexport const LogoutThunkCreator = () => async (dispatch) => {\r\n    let data = await apiLogout()\r\n\r\n    if (data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport {requiredField, maxLengthCreator} from \"../form/validators\";\r\nimport {Input} from \"../form/formsControls\"\r\nimport ModCSS from \"./formStyle.module.css\"; //Модифицируем наши стили с помощью .module\r\n\r\n// вынесли в переменную. так как если сразу добавить в validate, то это вызывает зависание\r\nconst maxLength20 = maxLengthCreator(20);\r\n\r\n//ниже JSX коде в котором находится HTML разметка\r\n// Field это специальные компоненты для form\r\n// handleSubmit получаем из стандартных свойств формы, из reduxForm. Этим мы говорим, что хотим доверить обработку onSubmit\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name=\"email\" \r\n                    placeholder={\"Email\"} \r\n                    component={Input}\r\n                    validate={[requiredField, maxLength20]} /> \r\n            </div>\r\n            <div>\r\n                <Field name=\"password\" \r\n                    placeholder={\"Password\"} \r\n                    component={Input}\r\n                    validate={[requiredField, maxLength20]} />\r\n            </div>\r\n            <div>\r\n                <Field name=\"rememberMe\" \r\n                    type={\"checkbox\"} \r\n                    component={\"input\"} /> Remember\r\n            </div>\r\n                {/* тут мы говорим, если у нас есть props.error тогда покажи {props.error} */}\r\n                {error && <div className={ModCSS.loginFormError}>\r\n                    {error}\r\n                </div>\r\n                }\r\n            <div>\r\n                <button> OK </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n//HOC\r\nconst ReduxLoginForm = reduxForm ({\r\n    form: \"login\" //уникальное имя для формы\r\n}) (LoginForm)\r\n\r\nexport default ReduxLoginForm;\r\n","import React from 'react';\r\n// import ModCSS from \"./Authorization.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport ReduxLoginForm from \"../../form/loginForm\"\r\nimport { connect } from 'react-redux';\r\nimport { LoginThunkCreator } from '../../redux/auth-reducer';\r\nimport { Redirect } from \"react-router\";\r\n\r\n//ниже JSX коде в котором находится HTML разметка\r\nconst Login = (props) => {\r\n\r\n    const onSubmitHandl = (formData) => {\r\n            // console.log(formData); //formData, все значения из формы\r\n        // изменяем под логинизацию\r\n        props.LoginThunkCreator(formData.email, formData.password, formData.rememberMe);\r\n        } // тут мы из пропсов вызываем LoginThunkCreator. Он приходит через connect.\r\n        // Но connect вызывает не LoginThunkCreator, а его диспатч authProfileThunk\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to = \"/ProfileInfoContainer\" />\r\n    }\r\n            \r\n            // вызываем другой onSubmit и получаем из формы LoginForm параметры handleSubmit\r\n    return (\r\n        <div>\r\n        <h3>LOGIN</h3>\r\n            <ReduxLoginForm onSubmit={onSubmitHandl} /> \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\n// export default Login;\r\n// HOC для логинизации. apiLogin прийдёт к нам в пропсы в Login\r\nexport default connect (mapStateToProps, {LoginThunkCreator}) (Login);\r\n","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\"; \r\nimport Login from \"./login\"\r\n\r\n\r\n//\r\nconst Auth = (props) => {\r\n    return (\r\n        <div>\r\n            {/* изменили после логинизации */}\r\n            {/* {props.isAuth ? props.login\r\n                : <NavLink to={\"/Login\"}>\r\n                    <Login />\r\n                    </NavLink>} */}\r\n\r\n            {props.isAuth\r\n                ? <div>{props.login} <button onClick={props.LogoutThunkCreator}>\r\n                                            Log out</button> </div>\r\n                : <NavLink to={\"/login\"}> <Login /> </NavLink>}\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;","import React from 'react';\r\nimport ModCSS from \"./Authorization.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport { connect } from 'react-redux';\r\n// import {authProfileThunk, LogoutThunkCreator} from \"../../redux/auth-reducer\" // authProfileThunk перенесли в app.js\r\nimport {LogoutThunkCreator} from \"../../redux/auth-reducer\"\r\nimport Auth from \"./auth\"\r\n\r\n//ниже JSX коде в котором находится HTML разметка\r\n// const AuthContainer = () => {\r\n//     return (\r\n//         // добавляем к HTML разметке JS код. Было className=\"item\", стало {ModCSS.item}\r\n//         // применяем шаблонные строки для конкатенации выражения {`${} ${}`}\r\n//         <div>\r\n//             <div className={`${ModCSS.item} ${ModCSS.active}`}>\r\n//                 <Login />\r\n//             </div>\r\n//             {/* <div className={ModCSS.item}>\r\n//                 Registration\r\n//             </div> */}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\nclass AuthContainer extends React.Component {\r\n    \r\n    componentDidMount() {\r\n        //перекинули запрос в api.js apiAuthProfile\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, \r\n        // {withCredentials: true}) //вторым параметром , {} передаём настройки запроса withCredentials что бы куки видели из другого сайта что мы авторизованны\r\n        // apiAuthProfile().then(response => {\r\n            //\r\n        // apiAuthProfile().then(data => {\r\n        //     // debugger\r\n        //     // if (response.data.resultCode === 0) {\r\n        //     if (data.resultCode === 0) {\r\n        //         // let {id, login, email} = response.data.data; //две data потому-что 1я data сидит в инструкции API, 2ю выдаёт response\r\n        //         let {id, login, email} = data.data; //две data потому-что 1я data сидит в инструкции API, 2ю выдаёт response\r\n        //         this.props.setAuthUserData (id, login, email);\r\n        //     }\r\n                    // });\r\n                \r\n        //когда компонента функциональная мы пропсы запрашиваем напрямую через props.\r\n        //когда компонента классовая мы пропсы запрашиваем через this.props.\r\n        // this.props.authProfileThunk() // перенесли в app.js\r\n    }\r\n    \r\n    render () {\r\n        return (\r\n            <div className={`${ModCSS.item} ${ModCSS.active}`}>\r\n               <Auth {...this.props} />\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\n// изменили после логинизации\r\n// export default connect (mapStateToProps, {authProfileThunk}) (AuthContainer);\r\n// export default connect (mapStateToProps, {authProfileThunk, LogoutThunkCreator}) (AuthContainer); // authProfileThunk перенесли в app.js\r\nexport default connect (mapStateToProps, {LogoutThunkCreator}) (AuthContainer);\r\n","//добавляем так же как в state.js\r\nconst ADD_POST_BLL = \"post/ADD_POST_BLL\";\r\n// убрали после того как добавили форму\r\n// const UPDATE_POST_CHANGE = \"UPDATE_POST_CHANGE\";\r\n\r\n\r\n//так как redux запускается до нашего state, мы не успеваем отобразить state и мы получаем ошибку\r\nlet initialState = {\r\n    postData: [\r\n        { id: 1, text: \"text1\", like: 10 },\r\n        { id: 2, text: \"text2\", like: 20 },\r\n        { id: 3, text: \"Bi\", like: 30 },\r\n        { id: 4, text: \"Mi\", like: 40 }\r\n    ],\r\n    // создали newPostData для принятия новых значений поля textarea\r\n    // newPostData: \"hard code textarea\", // убрали после того как добавили форму\r\n};\r\n\r\nconst myPostReducer = (state = initialState, action) => {\r\n//     if (action.type === ADD_POST_BLL) {\r\n//         {let newPost = {\r\n//             id: 5, \r\n//             // удалили postMessage, будем брать его через state\r\n//             // text: postMessage, \r\n//             text: state.newPostData, \r\n//             like: 50,\r\n//             }\r\n//             // this._state.myPostsPage.postData.push(newPost);\r\n//             //так как myPostsPage к нам приходит из state, меняем запись\r\n//             state.postData.push(newPost);\r\n//         // не добавлять пустой textarea\r\n//         // if (this._state.myPostsPage.newPostData === \"\"){this._state.myPostsPage.postData.pop(newPost)};\r\n//         //так как myPostsPage к нам приходит из state, меняем запись\r\n//         if (state.newPostData === \"\"){state.postData.pop(newPost)};\r\n//         //очищаем поле textarea\r\n//         // this._state.myPostsPage.newPostData = \"\";\r\n//         //так как myPostsPage к нам приходит из state, меняем запись\r\n//         state.newPostData = \"\";\r\n//         // обновляем страницу с новыми данными через reRenderEntireTree\r\n//         //при работе через reducer _callSubscriber уже тут не нужен\r\n//         // this._callSubscriber(this._state);\r\n//         }\r\n//     } else if (action.type === UPDATE_POST_CHANGE) {\r\n//         //добавили action к newText, так как этот параметр больше не может прийти через updatePostChange(newText)\r\n//         // this._state.myPostsPage.newPostData = action.newText;\r\n//         state.newPostData = action.newText;\r\n//         // this._callSubscriber(this._state); // вызываем reRenderEntireTree\r\n// }\r\n    //когда у нас дискретный(не бесконечный) набор чисел, можно применять switch\r\n//     switch (action.type) {\r\n//         case ADD_POST_BLL:\r\n//             let newPost = {\r\n//                 id: 5, \r\n//                 text: state.newPostData, \r\n//                 like: 50,\r\n//             }\r\n//             state.postData.push(newPost);\r\n//             if (state.newPostData === \"\"){state.postData.pop(newPost)};\r\n//             state.newPostData = \"\";\r\n//             return state;\r\n//         case UPDATE_POST_CHANGE:\r\n//             state.newPostData = action.newText;\r\n//             return state;\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n//применяем копирование объекта\r\n    // switch (action.type) {\r\n    //     case ADD_POST_BLL:{\r\n    //         let newPost = {\r\n    //             id: 5, \r\n    //             text: state.newPostData, \r\n    //             like: 50,\r\n    //         }\r\n    //         //создаём копию объекта\r\n    //         let stateCopy = {...state};\r\n    //         //добираемся до вложенного массива\r\n    //         stateCopy.postData = [...state.postData];\r\n    //         //добавляем посты уже в новую копию\r\n    //         stateCopy.postData.push(newPost);\r\n    //         if (stateCopy.newPostData === \"\"){stateCopy.postData.pop(newPost)};\r\n    //         stateCopy.newPostData = \"\";\r\n    //         return stateCopy;\r\n    //     }\r\n    //     case UPDATE_POST_CHANGE:{\r\n    //         let stateCopy = {...state};\r\n    //         // stateCopy.postData = [...state.postData];\r\n    //         stateCopy.newPostData = action.newText;\r\n    //         return stateCopy;\r\n    //     }\r\n    //     default:\r\n    //         return state;\r\n    // }\r\n    \r\n    ///переписываем оптимизируя\r\n    switch (action.type) {\r\n        // убрали после того как добавили форму\r\n        // case UPDATE_POST_CHANGE:\r\n        //     return {\r\n        //         ...state,\r\n        //         newPostData: action.newText\r\n        //     };\r\n        case ADD_POST_BLL:\r\n            let newPost = {\r\n                id: 5, \r\n                // заменили после того как добавили форму\r\n                // text: state.newPostData, \r\n                text: action.newTextPost, \r\n                like: 50,\r\n            };\r\n            // if (newPost === \"\"){state.myPostsPage.postData.slice(newPost)};\r\n            return {\r\n                ...state,\r\n                // убрали после того как добавили форму\r\n                // newPostData: \"\",\r\n                postData: [...state.postData, newPost]\r\n                // реализовать не добавлять пустой textarea\r\n                //if (state.myPostsPage.newPostData === \"\"){state.myPostsPage.postData.pop(newPost)};\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// заменили после того как добавили форму\r\n// export const addPostUIActionCreator = () => ({type: ADD_POST_BLL})\r\nexport const addPostUIActionCreator = (newTextPost) => ({type: ADD_POST_BLL, newTextPost})\r\n// убрали после того как добавили форму\r\n// export const postChangeActionCreator = (text) => ({type: UPDATE_POST_CHANGE, newText: text})\r\n\r\nexport default myPostReducer;\r\n","import React from 'react';\r\nimport ModCSS from \"./../MyPosts.module.css\"; //Модифицируем наши стили с помощью .module\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={ModCSS.item}>\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\" />\r\n                {/* принимаем атрибуты через пропсы из MyPosts */}\r\n                {`${props.text} ${props.like}`}\r\n                <div>\r\n                    <button>Like</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport {requiredField, maxLengthCreator} from \"../form/validators\";\r\nimport {Textarea} from \"../form/formsControls\"\r\n\r\n// вынесли в переменную. так как если сразу добавить в validate, то это вызывает зависание\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\n//ниже JSX коде в котором находится HTML разметка\r\n// Field это специальные компоненты для form\r\n// handleSubmit получаем из стандартных свойств формы, из reduxForm. Этим мы говорим, что хотим доверить обработку onSubmit\r\nconst PostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newTextPost\" \r\n                        placeholder={\"add your text post\"} \r\n                        // заменили потомучто, когда указываем свои кастомные элементы, пишем без кавычек\r\n                        // component={\"textarea\"}\r\n                        component={Textarea}\r\n                        validate={[requiredField, maxLength10]} /> \r\n            </div>\r\n                <div>\r\n                    <button> Add post </button>\r\n                </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n//HOC\r\nconst ReduxPostForm = reduxForm ({\r\n    form: \"post\" //уникальное имя для формы\r\n}) (PostForm)\r\n\r\nexport default ReduxPostForm;\r\n","import React from 'react';\r\nimport ModCSS from \"./MyPosts.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport Post from './Post/Post';\r\nimport { withAuthRedirect } from \"../../hoc/authRedirect\";\r\nimport ReduxPostForm from \"../../form/postForm\";\r\n\r\n\r\n\r\nconst MyPosts = (props) => {\r\n// debugger\r\n    // переносим массив в app.js\r\n    // let postData = [\r\n    //     { id: 1, text: \"text1\", like: \"10\" },\r\n    //     { id: 2, text: \"text2\", like: \"20\" },\r\n    //     { id: 3, text: \"Bi\", like: \"30\" },\r\n    //     { id: 4, text: \"Mi\", like: \"40\" }\r\n    // ];\r\n\r\n            {/* экспортируем компоненту Post */}\r\n            {/* передаём атрибуты компоненте, через пропсы */}\r\n            {/* <Post text=\"Hello\" like=\"10\" />\r\n            <Post text=\"You cool\" like=\"20\" /> */}\r\n            {/* в этом способе данные берем из массива с объектами */}\r\n            {/* <Post text={postData[2].text} like={postData[2].like} />\r\n            <Post text={postData[3].text} like={postData[3].like} /> */}\r\n\r\n    // добавляем props. к postData.map чтобы передать пропсы из index.js\r\n    let postDataEl = props.postData\r\n    .map(post => (<Post text={post.text} \r\n                        like={post.like}\r\n                        key={post.id} />))\r\n\r\n    // просим React создать ссылку\r\n    // убрали после того как добавили форму\r\n    // let newPostEl = React.createRef();\r\n\r\n    // создаём переменную которая будет отправлять новые значения в BLL\r\n    // убрали после того как добавили форму\r\n    // let addPostChange = () => {\r\n    //     let text = newPostEl.current.value;\r\n    //     // props.updatePostChange (text); // меняем на dispatch\r\n    //     // props.dispatch ({ type: \"UPDATE-POST-CHANGE\", newText: text})\r\n    //     //создали функцию addPostUIActionCreator которая будет передоваться в BLL\r\n    //     //убрали после создания MyPostsContainer\r\n    //     // props.dispatch(postChangeActionCreator(text))\r\n    //     props.updatePostChange(text);\r\n    // }\r\n\r\n    // считываем поле textarea с помощью addPostUI\r\n    // запускаем функцию addPostBLL из index.js\r\n    // убрали после того как добавили форму\r\n    // let addPostUI = () => {\r\n    //     // нет смысла отправлять текст в addPostUI\r\n    //     // let text = newPostEl.current.value;\r\n    //     // закеоментировали let text\r\n    //     // props.addPostBLL(text);\r\n    //     // props.addPostBLL(); // меняем на dispatch\r\n    //     // props.dispatch ({ type: \"ADD-POST-BLL\"})\r\n    //     //создали функцию addPostUIActionCreator которая будет передоваться в BLL\r\n    //     //убрали после создания MyPostsContainer\r\n    //     // props.dispatch(addPostUIActionCreator());\r\n    //     props.addPostBLL()\r\n    // }\r\n\r\n    // вынес пропс в переменную\r\n    // убрали после того как добавили форму\r\n    // let newPostDataRemove = props.newPostData;\r\n\r\n    //добавили для формы\r\n    const onSubmitHandl = (values) => {// values, значения из формы\r\n        props.addPostBLL(values.newTextPost)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n\r\n            {/* <div> реализовать отображения своего профиля\r\n                <img src={props.profileInfo.photos.large}/>\r\n                <Status status = {props.status} getUpdateStatusInfoThunk={props.getUpdateStatusInfoThunk}/> \r\n                {props.profileInfo.fullName}\r\n            </div> */}\r\n\r\n            <div className={ModCSS.item}>\r\n                <div className={ModCSS.header}><h3>My posts</h3></div>\r\n\r\n                {/* перенесли в MessageForm */}\r\n                {/* <div>\r\n                    <textarea onChange={addPostChange} \r\n                                ref={newPostEl} \r\n                                value={newPostDataRemove} />\r\n                </div> */}\r\n                {/* <div> */}\r\n                    {/* добавили событие onClick, и передали ей функцию addPost */}\r\n                    {/* <button onClick={addPostUI}>\r\n                            Add post</button>\r\n                </div> */}\r\n\r\n                {/* добавляем форму */}\r\n                <div>\r\n                    <ReduxPostForm onSubmit={onSubmitHandl} /> \r\n                </div>\r\n            </div>\r\n            { postDataEl }\r\n        </div>\r\n    );\r\n};\r\n\r\n//доступ только авторизованным\r\nlet authAccessHOC  = withAuthRedirect(MyPosts); \r\n\r\nexport default authAccessHOC;\r\n","// изменили после того как добавили форму\r\n// import {addPostUIActionCreator, postChangeActionCreator} from '../../redux/myPost-reducer';\r\nimport {addPostUIActionCreator} from '../../redux/myPost-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\n// const MyPostsContainer = (props) => {\r\n//     // debugger\r\n//     // считываем поле textarea с помощью addPostUI\r\n//     // запускаем функцию addPostBLL из index.js\r\n//     let addPostUI = () => {\r\n//         // нет смысла отправлять текст в addPostUI\r\n//         // let text = newPostEl.current.value;\r\n//         // закеоментировали let text\r\n//         // props.addPostBLL(text);\r\n//         // props.addPostBLL(); // меняем на dispatch\r\n//         // props.dispatch ({ type: \"ADD-POST-BLL\"})\r\n//         //создали функцию addPostUIActionCreator которая будет передоваться в BLL\r\n//         props.newState.dispatch(addPostUIActionCreator());\r\n//     }\r\n\r\n//     // создаём переменную которая будет отправлять новые значения в BLL\r\n//     let onPostChange = (text) => {\r\n//         props.newState.dispatch(postChangeActionCreator(text))\r\n//     }\r\n//     //необходимая переменная для пропсов\r\n//     let state = props.newState.getState();\r\n    \r\n//     return (\r\n//         <MyPosts updatePostChange = {onPostChange} \r\n//                 addPostBLL = {addPostUI}\r\n//                 postData = {state.myPostsPage.postData}\r\n//                 newPostData = {state.myPostsPage.newPostData} />\r\n//     );\r\n// };\r\n\r\n//реализация контейнера через react-redux\r\n//настраиваем функции для Provider\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        postData: state.myPostsPage.postData,\r\n        newPostData: state.myPostsPage.newPostData\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // убрали после того как добавили форму\r\n        // updatePostChange: (text) => {\r\n        //     dispatch(postChangeActionCreator(text));\r\n        // },\r\n\r\n        // заменили после того как добавили форму\r\n        // addPostBLL: () => {\r\n        //     dispatch(addPostUIActionCreator());\r\n        // }\r\n        addPostBLL: (newTextPost) => {\r\n            dispatch(addPostUIActionCreator(newTextPost));\r\n        }\r\n    }\r\n};\r\n\r\n//получаем store через Provider без лишних функций\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ModCSS from \"./Profile.module.css\"; //Модифицируем наши стили с помощью .module\r\n\r\nconst StatusWithHook = (props) => {\r\n\r\n    // ниже переписываем в короткий вид\r\n    // let stateWithSetState = useState(false); // нам useState вщзвращает массив из двух элементов. первым элементом будет сидеть значение [0], вторым элементо будет ф-я которое это значение устанавливает\r\n    //                                         // достаем из массива первое значение [0]\r\n    //                                         // сто старта это будет false\r\n    // let editMode = stateWithSetState[0];\r\n    // let setEditMode = stateWithSetState[1]; //вторым элементом сидит функуия которая будет изменять значение editMode\r\n\r\n    let [editMode, setEditMode] = useState(false); // меняем вызов статуса\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    // мы говорим реакту запускать нашь useEffect не всегда,\r\n    // а только в момент когда компонента монтировалась в первый раз\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] ) // [props.status] этим мы говорим, useEffect запускайся каждый раз когда будет изменён props.status\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false);\r\n        props.getUpdateStatusInfoThunk(status);\r\n    }\r\n    \r\n    const onStatusChenge = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activatedEditMode}>\r\n                        {props.status || \"---\"} </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div >\r\n                    <input autoFocus={true}\r\n                            onBlur={deActivatedEditMode}\r\n                            onChange={onStatusChenge}\r\n                            value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatusWithHook;","import React from 'react';\r\n// import ModCSS from \"./Profile.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport { withAuthRedirect } from \"../../hoc/authRedirect\";\r\nimport StatusWithHook from \"./statusWithHook\"\r\nimport MyPostsContainer from \"../MyPosts/MyPostsContainer\"\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    return (\r\n\r\n        // данные тут не отобразятся, пока не прогрузится сервер (дословно не могу понять как объяснить). \r\n        // Но прогрузится он не может. И в profileInfo будет null. \r\n        // Для этого в ProfileInfoContainer создаём условие для ожидания return if (!this.props.profileInfo) {return <Loading />}\r\n        // этим мы говорим, пока profileInfo не получил данные покажи Loading\r\n        <div>\r\n            <div>\r\n                <img src={props.profileInfo.photos.large}/>\r\n                {/* дальше применяем Хуки */}\r\n                {/* <Status status = {props.status} getUpdateStatusInfoThunk={props.getUpdateStatusInfoThunk}/> */}\r\n                <StatusWithHook status = {props.status} getUpdateStatusInfoThunk={props.getUpdateStatusInfoThunk}/>\r\n                <div>{props.profileInfo.fullName}</div>\r\n                {/* убрали так как добавили статусы из сервера */}\r\n                {/* <div>{props.profileInfo.aboutMe}</div> */}\r\n                <MyPostsContainer />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n//доступ только авторизованным\r\nlet authAccessHOC  = withAuthRedirect(ProfileInfo);\r\n\r\nexport default authAccessHOC;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./profileInfo\"\r\n// import ModCSS from \"./Profile.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport { connect } from 'react-redux';\r\nimport {getProfileInfoThunk, getStatusInfoThunk, getUpdateStatusInfoThunk} from '../../redux/profile-reducer';\r\nimport { withRouter, Redirect } from \"react-router\";\r\n\r\n\r\n//это контейнерная классовая компонента она обязана всё перенаправить в дочернюю компоненту\r\nclass ProfileInfoContainer extends React.Component {\r\n    \r\n    componentDidMount () {\r\n            \r\n            // let userId = this.props.authorizeUserId;\r\n            // if (!userId) {\r\n            //     this.props.history.push(\"/ProfileInfoContainer/17232\")\r\n            // }\r\n\r\n        let userId = this.props.match.params.userId; // получаем id пользователя\r\n        if (!userId) {\r\n            userId = 17232;} // -----------------------убирать жёсткую привязку\r\n\r\n        //перекинули запрос в api.js apiUsersRouter\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId) \r\n        // apiUsersRouter(userId).then(response => {\r\n        //перенесли в profileReducer, сделали через санки\r\n        // apiUsersRouter(userId).then(data => {\r\n        //     // debugger\r\n        //         // this.props.setProfileInfo(response.data); //этим мы говорим, добавь в наш store всё из data\r\n        //         this.props.setProfileInfo(data); //этим мы говорим, добавь в наш store всё из data\r\n        //     });\r\n                    \r\n        //когда компонента функциональная мы пропсы запрашиваем напрямую через props.\r\n        //когда компонента классовая мы пропсы запрашиваем через this.props.\r\n        this.props.getProfileInfoThunk(userId);\r\n        this.props.getStatusInfoThunk(userId); // добавили для отображения статуса\r\n    }\r\n    \r\n    render () {\r\n        // (!this.props.profileInfo) если у нас нет profileInfo\r\n        //этим условием мы говорим, пока наш profileInfo равен null, верни нас к profile\r\n        if (!this.props.profileInfo) { return <Redirect to = \"/profile\" /> };\r\n        // debugger\r\n        return (\r\n            <div>\r\n                {/* //{...this.props} Пропсы которые пришли в нас, мы их раскрываем {...}, и как атрибуты props= передаём нашеё компоненте */}\r\n                {/* <ProfileInfo {...this.props} props={this.props} /> это показано для примера, что внутри */}\r\n                <ProfileInfo {...this.props} profileInfo={this.props.profileInfo}\r\n                                            status={this.props.status}\r\n                                            getUpdateStatusInfoThunk={this.props.getUpdateStatusInfoThunk} />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n        profileInfo: state.profilePage.profileInfo,\r\n        status: state.profilePage.status, // добавили для отображения статуса\r\n        authorizeUserId: state.auth.userId, // если мы авторизованны показывать наш профиль. В итоге в компоненту приходят эти данные\r\n        isAuth: state.auth.isAuth\r\n});\r\n\r\n//возвращает новую компоненту ProfileInfoContainer и в неё ещё закинет данные из URL\r\nlet WithUrlDataContainerComponent = withRouter(ProfileInfoContainer);\r\n\r\n//рефакторинг\r\n// export default connect(mapStateToProps, {setProfileInfo})(ProfileInfoContainer);\r\nexport default connect(mapStateToProps, \r\n                        {getProfileInfoThunk, \r\n                        getStatusInfoThunk,\r\n                        getUpdateStatusInfoThunk})\r\n                        (WithUrlDataContainerComponent);\r\n","import React from \"react\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import { apiAuthProfile, apiLogin, apiLogout } from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\"\r\nimport {authProfileThunk} from \"./auth-reducer\"\r\n\r\nconst SET_INITIALIZED = \"app/SET_INITIALIZED\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n};\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state, // мы делаем копию state\r\n                initialized: true, // и меняем initialized\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSaccess = () => ({type: SET_INITIALIZED})\r\n\r\n// санк криейтор\r\nexport const initializApp = () => (dispatch) => {\r\n    let promise = dispatch(authProfileThunk());\r\n    Promise.all([promise])\r\n    .then (() => {\r\n        dispatch(initializedSaccess());\r\n    })\r\n}\r\n\r\nexport default appReducer;\r\n\r\n","import React from \"react\";\r\nimport Loading from \"../loading\";\r\n\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Loading />} >\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    };\r\n}","import React from \"react\";\r\nimport Navigation from \"./components/Navigation/Navigation\";\r\nimport AuthContainer from \"./components/Authorization/authContainer\";\r\nimport Login from \"./components/Authorization/login\";\r\n// import Profile from \"./components/Profile/Profile\";\r\n//изменили на Container\r\n// import MyPosts from \"./components/MyPosts/MyPosts\";\r\n// import Messages from \"./components/Messages/Messages\";\r\nimport MyPostsContainer from \"./components/MyPosts/MyPostsContainer\";\r\n// import MessagesContainer from \"./components/Messages/MessagesContainer\"; //перенесли ниже для React lazy\r\n// import UserContainer from \"./components/Users/userContainer\"; //перенесли ниже для React lazy\r\nimport ProfileInfoContainer from \"./components/Profile/profileInfoContainer\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport ModCSS from \"./App.module.css\"; //Модифицируем наши стили с помощью .module\r\nimport { BrowserRouter, Route } from \"react-router-dom\"; // импорт с фигурными скобками из-за экспорта не по дефолту\r\nimport { connect } from 'react-redux';\r\n// import { withRouter } from \"react-router\";\r\n// import { compose } from \"redux\";\r\nimport {initializApp} from \"./redux/app-reducer\";\r\nimport Loading from \"../src/loading\";\r\nimport {withSuspense} from \"./hoc/withSuspense\" // нужен для React Lazy\r\n\r\n// переносим массив из MyPosts, и далее в index.js\r\n// let postData = [\r\n//         { id: 1, text: \"text1\", like: \"10\" },\r\n//         { id: 2, text: \"text2\", like: \"20\" },\r\n//         { id: 3, text: \"Bi\", like: \"30\" },\r\n//         { id: 4, text: \"Mi\", like: \"40\" }\r\n//     ];\r\n\r\n//создали основную компоненту (это переменная, которая по факту функция)\r\n// const App = (props) => {\r\n//     // debugger\r\n//     return (\r\n//         // BrowserRouter, вложенность для маршрутизации\r\n//         <BrowserRouter>\r\n//             <div className={ModCSS.appWrapper}>\r\n//                 <div className={ModCSS.nav}>\r\n//                 {/* передаём сюда подкомпоненту. Компонента всегда с большой буквы */}\r\n//                 {/* в Navigation.jsx лежат ссылки для Route */}\r\n//                     <Navigation />\r\n//                 </div>\r\n//                 <div className={ModCSS.content}>\r\n//                     {/* создаём маршрутизатор для управлеения ссылками */}\r\n//                     {/* <Route path=\"/Authorization\" component={Authorization} />\r\n//                     <Route path=\"/Profile\" component={Profile} />\r\n//                     <Route path=\"/MyPosts\" component={MyPosts} />\r\n//                     <Route path=\"/Messages\" component={Messages} />\r\n//                     <Route path=\"/Settings\" component={Settings} /> */}\r\n//                     {/* через render можем вызвать анонимную функцию */}\r\n//                     <Route path=\"/Authorization\" render={ () => <AuthContainer />} />\r\n//                     <Route path=\"/Profile\" render={ () => <ProfileContainer />} />\r\n//                     {/* ? - означает что это параметр (:userId) не обязательный */}\r\n//                     <Route path=\"/ProfileInfoContainer/:userId?\" render={ () => <ProfileInfoContainer />} />\r\n//                     {/* передаём пропсы из массива postData */}\r\n//                     {/* затем берём postData уже из пропса который приходит в app.js из index.js. прописываем props.postData */}\r\n//                     {/* теперь массив с объектами находится в state.js, для этого добавляем appState (props.appState.postData)*/}\r\n//                     {/* <Route path=\"/MyPosts\" render={ () => <MyPosts postData={props.appState.postData}/>} />\r\n//                     <Route path=\"/Messages\" render={ () => <Messages MesDataName={props.appState.MesDataName} MesDataItem={props.appState.MesDataItem}/>} /> */}\r\n//                     {/* сгруппировали state и атрибуты имеют другой вид */}\r\n//                     {/* <Route path=\"/MyPosts\" render={ () => <MyPosts state={props.addState} addPostBLL={props.addPostBLL} />} /> */}\r\n//                     {/* добавили myPostsPage */}\r\n//                     {/* добавили updatePostChange */}\r\n//                     {/* переписываем с учётом dispatch */}\r\n//                     {/* <Route path=\"/MyPosts\" render={ () => <MyPosts state={props.addState} \r\n//                                                             addPostBLL={props.addPostBLL}\r\n//                                                             myPostsPage={props.myPostsPage}\r\n//                                                             updatePostChange={props.updatePostChange} />} /> */}\r\n//                                                             {/* заменяем компоненту */}\r\n//                     {/* <Route path=\"/MyPosts\" render={ () => <MyPosts APPstate={props.addState} \r\n//                                                             dispatch={props.dispatch} />} />\r\n//                                                             {/* updatePostChange тут уже не нужен */}\r\n//                                                             {/* updatePostChange={props.updatePostChange}  */}\r\n//                     {/* <Route path=\"/MyPosts\" render={ () => <MyPostsContainer newState = {props.addState} />} />\r\n//                     <Route path=\"/Messages\" render={ () => <MessagesContainer newState={props.addState} \r\n//                                                             dispatch={props.dispatch} />} /> */}\r\n//                                                             {/* переписываю под react-redux */}\r\n//                     <Route path=\"/MyPosts\" render={ () => <MyPostsContainer newState = {props.store} />} />\r\n//                     <Route path=\"/Messages\" render={ () => <MessagesContainer newState = {props.store}\r\n//                                                             dispatch={props.dispatch} />} />\r\n//                     <Route path=\"/login\" render={ () => <Login />} />\r\n//                     <Route path=\"/Settings\" render={Settings} />\r\n//                 </div>\r\n//             </div>\r\n//         </BrowserRouter>\r\n//     );\r\n// };\r\n\r\n// React lazy. Тут мы говорим, загрузи данную компоненту когда её вызовут\r\nconst MessagesContainer = React.lazy(() => import('./components/Messages/MessagesContainer'));\r\nconst UserContainer = React.lazy(() => import('./components/Users/userContainer'));\r\n\r\n// изменили компоненту на классовую\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        // this.props.authProfileThunk() // перенесли из AuthContainer\r\n        this.props.initializApp()\r\n    }\r\n    \r\n    render () {\r\n        \r\n        // делаем проверку. тут говорим, пока не получена инициализация покажи загрузчик\r\n        if (!this.props.initialized) {\r\n            return <Loading />\r\n        }\r\n\r\n        return (\r\n                <div className={ModCSS.appWrapper}>\r\n                    <div className={ModCSS.nav}>\r\n                        <Navigation />\r\n                    </div>\r\n                    <div className={ModCSS.content}>\r\n                        <Route path=\"/Authorization\" render={ () => <AuthContainer />} />\r\n                        <Route path=\"/Profile\" render={ () => <MyPostsContainer newState = {this.props.store} />} />\r\n                        {/* убрали, так как применили React.Lazy */}\r\n                        {/* <Route path=\"/Users\" render={ () => <UserContainer />} /> */}\r\n                        <Route path=\"/Users\" render={withSuspense(UserContainer)} />\r\n                        <Route path=\"/ProfileInfoContainer/:userId?\" render={ () => <ProfileInfoContainer />} />\r\n                        {/* убрали, так как применили React.Lazy */}\r\n                        {/* <Route path=\"/Messages\" render={ () => <MessagesContainer newState = {this.props.store}\r\n                                                                                dispatch={this.props.dispatch} />} /> */}\r\n                        <Route path=\"/Messages\" render={withSuspense(MessagesContainer)} />\r\n                        <Route path=\"/login\" render={ () => <Login />} />\r\n                        <Route path=\"/Settings\" render={Settings} />\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized // эту app необходимо брать из комбайна редьюсеров\r\n})\r\n\r\n// экспортируем для index.js\r\n// export default App; // изменили компоненту на классовую\r\n// export default connect(null, {authProfileThunk}) (App); // изменили аосле создания appReducer\r\nexport default connect(mapStateToProps, {initializApp}) (App);\r\n\r\n// не получилось запустить\r\n// export default compose(\r\n//     withRouter, \r\n//     connect(null, {authProfileThunk})) (App);","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport myPostReducer from \"./myPost-reducer\"\r\nimport messagesReducer from \"./messages-reducer\"\r\nimport profileReducer from \"./profile-reducer\"\r\nimport authReducer from \"./auth-reducer\"\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\n\r\n//собираем все рэдюсеры. соответственно это разделы state\r\nlet reducers = combineReducers({\r\n    myPostsPage: myPostReducer, \r\n    messagesPage: messagesReducer,\r\n    profilePage: profileReducer,\r\n    auth: authReducer,\r\n    form: formReducer, // тут form обязательный ключ\r\n    app: appReducer\r\n});\r\n\r\n\r\n//добавили для расширения браузера Redux DevTools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//createStore создаёт внутри себя  state внутр которого есть reducers (создаём store с помощью redux)\r\n//applyMiddleware этим мы говорим, прими промежуточный слой. чтобы запустить санки из санк-киейтора\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware)); //убрали после добавления Redux DevTools\r\n\r\n// Изменили после внедрения Redux DevTools, во избежании конфликтов\r\n// window.store = store;\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react'; //подключаем модуль реакт из папки модулей\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'; // импортируем сюда компоненту\r\nimport reportWebVitals from './reportWebVitals';\r\n//отключаем так как подключили redux\r\n// import store from './redux/store';\r\nimport store from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\n// import {addPostBLL, updatePostChange, subscribe} from './redux/state'; //импортируем не по дефолту, нужны {} // это уже не нужно, та как теперь экспортируем store\r\n// import {reRenderEntireTree} from \"./redux/render\" // render.js уже не нужен\r\nimport { BrowserRouter } from \"react-router-dom\"; // импорт с фигурными скобками из-за экспорта не по дефолту\r\n\r\n// переносим массив из app.js\r\n// переносим все массивы state.js\r\n// let postData = [\r\n//     { id: 1, text: \"text1\", like: \"10\" },\r\n//     { id: 2, text: \"text2\", like: \"20\" },\r\n//     { id: 3, text: \"Bi\", like: \"30\" },\r\n//     { id: 4, text: \"Mi\", like: \"40\" }\r\n// ];\r\n\r\n// let MesDataName = [\r\n//     {id: 1, name: \"name1\"},\r\n//     {id: 2, name: \"name2\"},\r\n//     {id: 3, name: \"name3\"},\r\n//     {id: 4, name: \"name4\"}\r\n// ];\r\n\r\n// let MesDataItem = [\r\n//     {id: 1, item: \"item1\"},\r\n//     {id: 2, item: \"item2\"},\r\n//     {id: 3, item: \"item3\"},\r\n//     {id: 4, item: \"item4\"},\r\n// ];\r\n\r\n// перенесли функцию reRenderEntireTree в render.js\r\n// let reRenderEntireTree = (state) => {\r\n//     // передаём основную компоненту App тегу body\r\n//     ReactDOM.render(<React.StrictMode>\r\n//         <App addState={state} addPostBLL={addPostBLL} />\r\n//         {/* так было до state.js */}\r\n//         {/* <App postData={postData} MesDataName={MesDataName} MesDataItem={MesDataItem}/> */}\r\n//     </React.StrictMode>,\r\n//         document.getElementById('root')\r\n//     );\r\n// }\r\n// вернули обратно для рефакторинга\r\n// let reRenderEntireTree = (state) => {\r\n//     // передаём основную компоненту App тегу body\r\n//     ReactDOM.render(<React.StrictMode>\r\n//         <App addState={state} \r\n//             addPostBLL={addPostBLL} \r\n//             newPostData={state} \r\n//             updatePostChange={updatePostChange}/>\r\n//         {/* так было до state.js */}\r\n//         {/* <App postData={postData} MesDataName={MesDataName} MesDataItem={MesDataItem}/> */}\r\n//     </React.StrictMode>,\r\n//         document.getElementById('root')\r\n//     );\r\n// }\r\n\r\n// переписываем с учётом dispatch\r\n// let reRenderEntireTree = (state) => {\r\n//     // новый вид после появления store\r\n//     ReactDOM.render(<React.StrictMode>\r\n//         {/* bind тут нужен чтобы this методa addPostBLL вызывался не от addPostBLL, а от объекта store */}\r\n//         <App addState={state} \r\n//             addPostBLL={store.addPostBLL.bind(store)} \r\n//             newPostData={state} \r\n//             updatePostChange={store.updatePostChange.bind(store)}/>\r\n//         {/* так было до state.js */}\r\n//         {/* <App postData={postData} MesDataName={MesDataName} MesDataItem={MesDataItem}/> */}\r\n//     </React.StrictMode>,\r\n//         document.getElementById('root')\r\n//     );\r\n// }\r\n\r\n// let reRenderEntireTree = () => {\r\n//     // debugger\r\n//     // новый вид после появления store\r\n//     ReactDOM.render(<React.StrictMode>\r\n//         {/* bind тут нужен чтобы this методa addPostBLL вызывался не от addPostBLL, а от объекта store */}\r\n//         <App addState={store} \r\n//             dispatch={store.dispatch.bind(store)} />\r\n//             {/* updatePostChange тут уже не нужен */}\r\n//             {/* updatePostChange={store.updatePostChange.bind(store)} */}\r\n//         {/* так было до state.js */}\r\n//         {/* <App postData={postData} MesDataName={MesDataName} MesDataItem={MesDataItem}/> */}\r\n//     </React.StrictMode>,\r\n//         document.getElementById('root')\r\n//     );\r\n// }\r\n\r\n//перепичываем через Provider (context API)\r\n// let reRenderEntireTree = () => {\r\n//     // debugger\r\n//     // новый вид после появления store\r\n//     ReactDOM.render(<React.StrictMode>\r\n//         {/* bind тут нужен чтобы this методa addPostBLL вызывался не от addPostBLL, а от объекта store */}\r\n//         <Provider store={store}>\r\n//             <App />\r\n//         </Provider>\r\n//             {/* updatePostChange тут уже не нужен */}\r\n//             {/* updatePostChange={store.updatePostChange.bind(store)} */}\r\n//         {/* так было до state.js */}\r\n//         {/* <App postData={postData} MesDataName={MesDataName} MesDataItem={MesDataItem}/> */}\r\n//     </React.StrictMode>,\r\n//         document.getElementById('root')\r\n//     );\r\n// }//убрали функцию reRenderEntireTree, так как добавили react-redux\r\n\r\n// reRenderEntireTree(store._state); было так\r\n// reRenderEntireTree(store.getState());//убрали, так как добавили react-redux\r\n\r\n// тут reRenderEntireTree не означает что мы его запускем. запускается он как переданный аргумент для subscribe после вызова\r\n// store.subscribe(reRenderEntireTree); \r\n\r\n// //так как redux не уведомляет об изменённом state, запрашиваем принудительно изменённый state\r\n// store.subscribe(() => {\r\n//     let state = store.getState()\r\n//     reRenderEntireTree(state);\r\n// });//убрали, так как добавили react-redux\r\n\r\nReactDOM.render(<React.StrictMode>\r\n                    <BrowserRouter>\r\n                        <Provider store={store}>\r\n                            <App />\r\n                        </Provider>\r\n                    </BrowserRouter>\r\n                </React.StrictMode>,\r\n                    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n","//проверка поля формы на валидность\r\nexport const requiredField = value => {\r\n    if (value) return undefined; // если value есть, то возвращаем undefined\r\n    // а иначе \"field is requred\"\r\n    return \"field is requred\"\r\n}\r\n\r\n// санк кнрейтор для количества символов (тут принцип замыкания)\r\n// maxLength приходит из параметров функции maxLengthCreator, а value из поля формы\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `max length is ${maxLength} symbols`; \r\n    return undefined;\r\n}\r\n\r\n","import { apiStatusInfo, apiUpdateStatusInfo, apiGetUsers, apiFollowUser, apiUnfollowUser, apiUsersRouter } from \"../api/api\"\r\n\r\n///3\r\nconst FOLLOW = \"profile/FOLLOW\";\r\nconst UNFOLLOW = \"profile/UNFOLLOW\";\r\nconst SET_USERS = \"profile/SET_USERS\";\r\nconst SET_CARRENT_PAGE = \"profile/SET_CARRENT_PAGE\";//7. создаём константу для работы с сервером. Далее берём её и обрабатываем в state (const profileReducer)\r\nconst SET_USER_COUNT = \"profile/SET_USER_COUNT\";//15. \r\nconst TOGGLE_IS_LOADING = \"profile/TOGGLE_IS_LOADING\";\r\nconst SET_PROFILE_INFO = \"profile/SET_PROFILE_INFO\";\r\nconst TOGGLE_IS_FOLLOWING = \"profile/TOGGLE_IS_FOLLOWING\";\r\nconst SET_STATUS = \"profile/SET_STATUS\";\r\n\r\n///1\r\n// let initialState = {\r\n//     users: [    //         {\r\n//     //     //             id: 1, photoUrl: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\",\r\n//     //     //             followed: true, fullName: \"Ivan\", status: \"I am in network Russia\", location: { country: \"Russia\", city: \"Moscow\" }\r\n//     //     //         },\r\n//     //     //         {\r\n//     //     //             id: 2, photoUrl: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\",\r\n//     //     //             followed: false, fullName: \"Roma\", status: \"I am in network Europe\", location: { country: \"Europe\", city: \"Italy\" }\r\n//     //     //         },\r\n//     //     //         {\r\n//     //     //             id: 3, photoUrl: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\",\r\n//     //     //             followed: false, fullName: \"Dima\", status: \"I am in network Asia\", location: { country: \"Asia\", city: \"Japan\" }\r\n//     //     //         },\r\n//     //     //         {\r\n//     //     //             id: 4, photoUrl: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU\",\r\n//     //     //             followed: false, fullName: \"Rita\", status: \"I am in network USA\", location: { country: \"USA\", city: \"Chicago\" }\r\n//     //     //         },\r\n//     ],\r\n// };\r\n\r\n//создаём для store\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10, //1 \r\n    totalUsersCount: 0,//общее количество пользобателей\r\n    carrentPage: 1,\r\n    isLoading: false, //ожидание прогрузки данных с сервера\r\n    profileInfo: null,\r\n    followingInProcess: [], //это для того чтобы небыло много запросов на сервер по нажатию на кнопку. Т.е. пока не прийдут изменения делаем кнопку неактивной\r\n    status: \"\"\r\n};\r\n\r\n// рефакторим для сокращения кода\r\nconst updatefollowUnfollow = (items, itemId, propName, newProps) => {\r\n    return items.map(u => {\r\n        if (u[propName] === itemId) {\r\n            return {...u, ...newProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n\r\n///4\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                //копируем users из state\r\n\r\n                // ниже рефакторим\r\n                // users: state.users.map(u => {\r\n                //     //когда, пришёл очередной users пришёл в колбэк u благодаря .map, \r\n                //     //и если его id равен айдишнику который нужно зафоловить,\r\n                //     //то тогда его нужно зафоловить сделать true, а для этого\r\n                //     //нужно вернуть изменённую копию\r\n                //     if (u.id === action.userId) {\r\n                //         return { ...u, followed: true }\r\n                //     }\r\n                //     //если не совпадает, возвращаем тот же самый объект\r\n                //     return u;\r\n                // })\r\n\r\n                users: updatefollowUnfollow(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                //копируем users из state\r\n                // users: state.users.map(u => {\r\n                //     //когда, пришёл очередной users пришёл в колбэк u благодаря .map, \r\n                //     //и если его id равен айдишнику который нужно зафоловить,\r\n                //     //то тогда его нужно зафоловить сделать true, а для этого\r\n                //     //нужно вернуть изменённую копию\r\n                //     if (u.id === action.userId) {\r\n                //         return { ...u, followed: false }\r\n                //     }\r\n                //     //если не совпадает, возвращаем тот же самый объект\r\n                //     return u;\r\n                // })\r\n\r\n                users: updatefollowUnfollow(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case SET_USERS: {\r\n            return { ...state, users: [...action.users] } //взять старый state, взять пользователей которые там были и перезатиреть теми пользователями которые пришли из экшна\r\n        }\r\n        case SET_CARRENT_PAGE: {\r\n            return { ...state, carrentPage: action.carrentPage } //8. взять старый carrentPage, и меняем на тот carrentPage который сидит в action. затем его нужно задиспатчить\r\n        }\r\n        case SET_USER_COUNT: {\r\n            return { ...state, totalUsersCount: action.count } //16. \r\n        }\r\n        case TOGGLE_IS_LOADING: {\r\n            return { ...state, isLoading: action.isLoading }\r\n        }\r\n        case SET_PROFILE_INFO: {\r\n            return { ...state, profileInfo: action.profileInfo }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING: {\r\n            return {\r\n                ...state,\r\n                followingInProcess: action.isLoading\r\n                    ? [...state.followingInProcess, action.userId] //деструктуризируем массив который был и в конец дописываем id которая приходит к нам в action\r\n                    : state.followingInProcess.filter(id => id != action.userId)\r\n            } //state.followingInProcess.filter() делаем копию и убираем id пользователя(пропускаем только ту id которая не равна той id которая пришла в action) \r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ///2\r\n// export const followAC = (userId) => ({type: FOLLOW, userId})\r\n// export const unFollowAC = (userId) => ({type: UNFOLLOW, userId})\r\n// export const setUsersAC = (users) => ({type: SET_USERS, users})\r\n// export const setCarrentPageAC = (carrentPage) => ({type: SET_CARRENT_PAGE, carrentPage}) //11. возвращаем action setCarrentPage\r\n// export const setTotalUsersCountAC = (totalUsersCount) => ({type: SET_USER_COUNT, count: totalUsersCount}) //17. расписали count чтобы понять что от куда берётся\r\n// export const toggleIsLoadingAC = (isLoading) => ({type: TOGGLE_IS_LOADING, isLoading})\r\n\r\n//Убираем окончание АС чтобы исправить под новый синтаксис\r\n//переписали follow unFollow после использования санок\r\n// export const follow = (userId) => ({ type: FOLLOW, userId })\r\n// export const unFollow = (userId) => ({ type: UNFOLLOW, userId })\r\nexport const followSaccess = (userId) => ({ type: FOLLOW, userId })\r\nexport const unFollowSaccess = (userId) => ({ type: UNFOLLOW, userId })\r\nexport const setUsers = (users) => ({ type: SET_USERS, users })\r\nexport const setCarrentPage = (carrentPage) => ({ type: SET_CARRENT_PAGE, carrentPage }) //11. возвращаем action setCarrentPage\r\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_USER_COUNT, count: totalUsersCount }) //17. расписали count чтобы понять что от куда берётся\r\nexport const toggleIsLoading = (isLoading) => ({ type: TOGGLE_IS_LOADING, isLoading })\r\nconst setProfileInfo = (profileInfo) => ({ type: SET_PROFILE_INFO, profileInfo })\r\nexport const toggleFollowingInProcess = (isLoading, userId) => ({ type: TOGGLE_IS_FOLLOWING, isLoading, userId })\r\nconst setStatus = (status) => ({ type: SET_STATUS, status })\r\n\r\n//создаём санку. а далее санк-криейтор\r\n//создаём санк-криейтор. это функция, котороя может что то принимать и возвращать санку\r\n// ниже сделали рефакторинг через async await. измегить везде где есть then\r\n// export const getUsersThunkCreator = (carrentPage, pageSize) => {\r\n//     return (dispatch) => {\r\n//         dispatch(toggleIsLoading(true));\r\n//         apiGetUsers(carrentPage, pageSize).then(data => {\r\n//             dispatch(toggleIsLoading(false));\r\n//             // this.props.setUsers(response.data.items); //этим мы говорим, добавь в наш store юзеров из items\r\n//             dispatch(setUsers(data.items)); //этим мы говорим, добавь в наш store юзеров из items\r\n//             dispatch(setTotalUsersCount(data.totalCount))\r\n//         });\r\n//     }\r\n// }\r\n\r\nexport const getUsersThunkCreator = (carrentPage, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsLoading(true));\r\n        // нечватает строчки\r\n        // dispatch(setCurrentPage(carrentPage))\r\n\r\n        let data = await apiGetUsers(carrentPage, pageSize)\r\n        dispatch(toggleIsLoading(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\n// ниже делаем рефакторинг\r\n// export const followThunk = (userId) => {\r\n//     return async (dispatch) => {\r\n//         dispatch(toggleFollowingInProcess(true, userId));\r\n//         let data = await apiFollowUser(userId)\r\n//         if (data.resultCode == 0) {\r\n//             dispatch(followSaccess(userId));\r\n//         }\r\n//         dispatch(toggleFollowingInProcess(false, userId));\r\n//     }\r\n// }\r\n\r\n// export const unFollowThunk = (userId) => {\r\n//     return async (dispatch) => {\r\n//         dispatch(toggleFollowingInProcess(true, userId));\r\n//         let data = await apiUnfollowUser(userId)\r\n//         if (data.resultCode == 0) {\r\n//             dispatch(unFollowSaccess(userId));\r\n//         }\r\n//         dispatch(toggleFollowingInProcess(false, userId));\r\n//     }\r\n// }\r\n\r\nconst followUnfollow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingInProcess(true, userId));\r\n\r\n    let data = await apiMethod(userId);\r\n\r\n    if (data.resultCode == 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingInProcess(false, userId));\r\n}\r\n\r\nexport const followThunk = (userId) => {\r\n    return async (dispatch) => {\r\n        // закинули логику в переменную apiMethod и actionCreator. каждый берёт значения которые ему нужны\r\n        let apiMethod = apiFollowUser.bind(apiFollowUser);\r\n        let actionCreator = followSaccess;\r\n\r\n        // этот кусок кода одинаковый для каждой санки\r\n        followUnfollow(dispatch, userId, apiMethod, actionCreator);\r\n    }\r\n}\r\n\r\nexport const unFollowThunk = (userId) => {\r\n    return async (dispatch) => {\r\n        // // закинули логику в переменную apiMethod и actionCreator. каждый берёт значения которые ему нужны\r\n        // let apiMethod = apiUnfollowUser.bind(apiUnfollowUser);\r\n        // let actionCreator = unFollowSaccess;\r\n        // // этот кусок кода одинаковый для каждой санки\r\n        // followUnfollow(dispatch, userId, apiMethod, actionCreator);\r\n\r\n        // сокращаем до одной строчки\r\n        followUnfollow(dispatch, userId, apiUnfollowUser.bind(apiUnfollowUser), unFollowSaccess);\r\n    }\r\n}\r\n\r\n//так пишется санка в стрелочной функции\r\nexport const getProfileInfoThunk = (userId) => async (dispatch) => {\r\n\r\n    let data = await apiUsersRouter(userId)\r\n\r\n    // this.props.setProfileInfo(response.data); //этим мы говорим, добавь в наш store всё из data\r\n    dispatch(setProfileInfo(data)); //этим мы говорим, добавь в наш store всё из data\r\n\r\n}\r\n\r\nexport const getStatusInfoThunk = (userId) => async (dispatch) => {\r\n\r\n    let data = await apiStatusInfo(userId)\r\n\r\n    dispatch(setStatus(data));\r\n}\r\n\r\nexport const getUpdateStatusInfoThunk = (status) => async (dispatch) => {\r\n\r\n    let data = await apiUpdateStatusInfo(status)\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n","import React from \"react\";\r\nimport ModCSS from \"./formStyle.module.css\"; //Модифицируем наши стили с помощью .module\r\n\r\n// рефакторим для того что бы получилось сделать форму логина\r\n// // создаем кастомную компоненту textarea для отображения пользователю информации об валидности полей\r\n// export const Textarea = ({input, meta, ...props}) => { //Применяем REST оператор. этим мы говорим. \r\n//     //что хотим достать деструктуризацией input и meta, \r\n//     //а в ...props будет всё остальное кроме input и meta\r\n    \r\n// const showError = meta.touched && meta.error; // meta.touched и meta.error стандартно из формы\r\n\r\n//     return (\r\n//         // свойство error сидит в meta\r\n//         // (showError ? ModCSS.error : \" \") Тут говорим. если ошибка есть покажи showError и отобрази ModCSS.error, а иначе \" \"\r\n//         <div className={ModCSS.form + \" \" + (showError ? ModCSS.error : \" \")}>\r\n//             {/* деструктуризацируем input и props */} \r\n//             <textarea {...input} {...props} /> \r\n//             <div>\r\n//                 {/* если поле Textarea было тронуто и не выполнено условие, тогда показываем span */}\r\n//             { showError && <span>{ meta.error }</span> }\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport const FormControl = ({input, meta, child, ...props}) => { // добавили child\r\n\r\nconst showError = meta.touched && meta.error;\r\n\r\n    return ( // изменили textarea на { props.children } \r\n        <div className={ModCSS.form + \" \" + (showError ? ModCSS.error : \" \")}>\r\n             { props.children } \r\n            <div>\r\n               { showError && <span>{ meta.error }</span> }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props; //...restProps остаточные пропсы\r\n    return <FormControl {...props} > <textarea {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props} > <input {...input} {...restProps} /> </FormControl>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"formStyle_form__1PX4e\",\"error\":\"formStyle_error__2vPOB\",\"loginFormError\":\"formStyle_loginFormError__1_f_C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__2r3MX\"};","import React from 'react';\r\nimport { Redirect } from \"react-router\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth, // проверка авторизации. isAuth прийдёт в пропсах (в Messages.jsx) и мы сможем его прочитать\r\n});\r\n\r\n//реализация НОС компоненты. Когда вызывается withAuthRedirect, вызывается две компоненты\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            //перенаправление на страницу логина если не авторизован\r\n            if (!this.props.isAuth) {return <Redirect to={\"/login\"} />};\r\n            return <Component {...this.props} /> // все пропсы которые приходят в withAuthRedirect, передаются в {...props}\r\n        }\r\n    }\r\n    \r\n    let ConnectedAuthAccessHOC = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthAccessHOC;\r\n}","export default __webpack_public_path__ + \"static/media/isLoading.73cfc5f4.gif\";","import React from 'react';\r\nimport loading from \"./isLoading.gif\"\r\n\r\nlet Loading = () => {\r\n    return <div>\r\n        <img src={loading} />\r\n    </div>\r\n}\r\n\r\nexport default Loading\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__3aRJh\",\"nav\":\"App_nav__bdmEA\",\"content\":\"App_content__ogXEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Authorization_item__3dXWj\",\"active\":\"Authorization_active__1bQlJ\"};"],"sourceRoot":""}